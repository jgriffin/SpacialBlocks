#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 1.0 (409.100.15)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Materials", "ABSPlasticHolder", "Holders"]
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    float3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def "Materials" (
        active = true
        references = @Materials/GridMaterial.usda@
    )
    {
        reorder nameChildren = ["UnitGridLinesMaterial", "LineCountMaterial", "LightGridMaterial", "GlobeMaterial", "GridMaterial", "ABSPlasticMaterial", "GraphNodes", "Holders"]
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "GridMaterial" (
            active = true
        )
        {
            reorder nameChildren = ["DefaultSurfaceShader", "BaseColor3", "Multiply_1", "Add", "Subtract_1", "Multiply_2", "MaterialXPreviewSurface", "Texcoord", "Multiply", "Fractional", "BaseColor", "LineColor", "LineWidths", "LineCounts", "Remap", "Separate2", "Combine3", "Range", "Subtract", "Absval", "Min", "Alpha", "LineColor3", "UnitGridLineMaterial"]
            color4f inputs:BaseColor = (0.89737034, 0.89737034, 0.89737034, 1) (
                colorSpace = "srgb_texture"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (67.29334, 432.31796)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 1765
                    }
                }
            )
            color4f inputs:LineColor = (0.55945957, 0.55945957, 0.55945957, 1) (
                colorSpace = "srgb_texture"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (66.555145, 327.8113)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 1765
                    }
                }
            )
            float2 inputs:LineCounts = (10, 10) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (70.171875, 134.13281)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 1765
                    }
                }
            )
            float2 inputs:LineWidths = (0.1, 0.1) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (72.04498, 230.3688)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 1765
                    }
                }
            )
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 1682

            over "MaterialXPreviewSurface"
            {
                float inputs:metallic = 0.1
                float inputs:opacity.connect = </Root/Materials/GridMaterial/Alpha.outputs:out>
                float inputs:opacityThreshold
                float2 ui:nodegraph:node:size = (207.5, 199)
                int ui:nodegraph:node:stackingOrder = 1682
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:opacityThreshold", "inputs:metallic", "inputs:opacity"]
            }

            over "Remap"
            {
                color3f inputs:outhigh.connect = </Root/Materials/GridMaterial/BaseColor3.outputs:color3>
                color3f inputs:outlow.connect = </Root/Materials/GridMaterial/LineColor3.outputs:color3>
                float2 ui:nodegraph:node:pos = (1754.9023, 201.90625)
                float2 ui:nodegraph:node:size = (94, 181)
                int ui:nodegraph:node:stackingOrder = 1765
            }

            over "Fractional"
            {
                float2 inputs:in.connect = </Root/Materials/GridMaterial/Add.outputs:out>
                float2 ui:nodegraph:node:pos = (486.61386, 53.799084)
                float2 ui:nodegraph:node:size = (154.5, 109)
                int ui:nodegraph:node:stackingOrder = 1765
            }

            over "Multiply"
            {
                float2 inputs:in2.connect = </Root/Materials/GridMaterial.inputs:LineCounts>
                float2 ui:nodegraph:node:pos = (256.8672, 42.23828)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 1765
            }

            over "Combine3"
            {
                float2 ui:nodegraph:node:size = (145, 54)
                int ui:nodegraph:node:stackingOrder = 1765
            }

            over "Subtract" (
                active = false
            )
            {
                delete float2 inputs:in1.connect = </Root/Materials/GridMaterial/Fractional.outputs:out>
                float2 inputs:in2.connect = None
                float2 ui:nodegraph:node:pos = (614.65234, 126.72266)
                float2 ui:nodegraph:node:size = (61.5, 36)
                int ui:nodegraph:node:stackingOrder = 1512
            }

            over "Absval"
            {
                float2 inputs:in.connect = </Root/Materials/GridMaterial/Subtract_1.outputs:out>
                float2 ui:nodegraph:node:pos = (785.5703, 88.63672)
                float2 ui:nodegraph:node:size = (121.5, 53)
                int ui:nodegraph:node:stackingOrder = 1765
            }

            over "BaseColor" (
                active = false
            )
            {
                float2 ui:nodegraph:node:size = (151, 53)
                int ui:nodegraph:node:stackingOrder = 1390
            }

            over "LineColor" (
                active = false
            )
            {
                float2 ui:nodegraph:node:size = (151, 53)
                int ui:nodegraph:node:stackingOrder = 1390
            }

            over "Texcoord"
            {
                float2 ui:nodegraph:node:size = (180.5, 53)
                int ui:nodegraph:node:stackingOrder = 1766
            }

            over "LineCounts" (
                active = false
            )
            {
                float2 ui:nodegraph:node:size = (151.5, 53)
                int ui:nodegraph:node:stackingOrder = 1370
            }

            over "LineWidths" (
                active = false
            )
            {
                float2 ui:nodegraph:node:size = (150, 53)
                int ui:nodegraph:node:stackingOrder = 1371
            }

            over "Separate2"
            {
                float2 ui:nodegraph:node:pos = (1179.2645, 94.26802)
                float2 ui:nodegraph:node:size = (115, 127)
                int ui:nodegraph:node:stackingOrder = 1765
            }

            over "Min"
            {
                float2 ui:nodegraph:node:size = (113, 40)
                int ui:nodegraph:node:stackingOrder = 1765
            }

            over "Range"
            {
                float2 inputs:in.connect = </Root/Materials/GridMaterial/Fractional.outputs:out>
                float2 inputs:inhigh.connect = </Root/Materials/GridMaterial.inputs:LineWidths>
                float2 inputs:inlow = (0, 0)
                float2 inputs:inlow.connect = </Root/Materials/GridMaterial.inputs:LineWidths>
                float2 ui:nodegraph:node:size = (98, 217)
                int ui:nodegraph:node:stackingOrder = 1765
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:inhigh", "inputs:inlow"]
            }

            def Shader "Alpha"
            {
                uniform token info:id = "ND_remap_float"
                float inputs:in.connect = </Root/Materials/GridMaterial/Min.outputs:out>
                float inputs:inhigh
                float inputs:inlow
                float inputs:outhigh.connect = </Root/Materials/GridMaterial/BaseColor3.outputs:alpha>
                float inputs:outlow.connect = </Root/Materials/GridMaterial/LineColor3.outputs:alpha>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1754.418, 408.22266)
                float2 ui:nodegraph:node:size = (94, 181)
                int ui:nodegraph:node:stackingOrder = 1765
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
            }

            def Shader "Multiply_1"
            {
                uniform token info:id = "ND_multiply_vector2"
                float2 inputs:in1.connect = </Root/Materials/GridMaterial.inputs:LineWidths>
                float2 inputs:in2 = (0.5, 0.5)
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (256.59766, 146.23828)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 1765
            }

            def Shader "Add"
            {
                uniform token info:id = "ND_add_vector2"
                float2 inputs:in1.connect = </Root/Materials/GridMaterial/Multiply.outputs:out>
                float2 inputs:in2.connect = </Root/Materials/GridMaterial/Multiply_1.outputs:out>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (340.26172, 70.515625)
                float2 ui:nodegraph:node:size = (61.5, 36.5)
                int ui:nodegraph:node:stackingOrder = 1765
            }

            def Shader "Subtract_1"
            {
                uniform token info:id = "ND_subtract_vector2"
                float2 inputs:in1.connect = </Root/Materials/GridMaterial/Fractional.outputs:out>
                float2 inputs:in2.connect = </Root/Materials/GridMaterial.inputs:LineWidths>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (625.15234, 127.109375)
                float2 ui:nodegraph:node:size = (61.5, 36)
                int ui:nodegraph:node:stackingOrder = 1765
            }

            def Shader "Multiply_2"
            {
                uniform token info:id = "ND_multiply_vector2"
                float2 inputs:in1.connect = </Root/Materials/GridMaterial.inputs:LineWidths>
                float2 inputs:in2 = (1.2, 1.2)
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (605.3672, 215.5)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 1765
            }
        }

        def Xform "GraphNodes" (
            active = true
        )
        {
            reorder nameChildren = ["Holders", "isOnGridUnit", "shouldDrawGridLine"]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def NodeGraph "isOnGridUnit"
            {
                reorder nameChildren = ["Fractional", "Add_1", "isOnXYZ", "Absval", "half_line", "Oneminus_1", "Convert", "isNotZero", "Range", "Step", "Add_2", "Add_3", "Oneminus", "Multiply", "Modulo"]
                float3 inputs:gridUnits = (0.1, 0.1, 0.1) (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (21.1875, -126.078125)
                            float2 sizeInSubgraph = (139, 53)
                            int stackingOrderInSubgraph = 3143
                        }
                    }
                )
                float3 inputs:gridUnits.connect = </Root/Materials/UnitGridLinesMaterial/GridUnits.outputs:out>
                float inputs:lineWidth = 0.01 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (18.117188, 36.359375)
                            float2 sizeInSubgraph = (126.5, 53)
                            int stackingOrderInSubgraph = 3013
                        }
                    }
                )
                float inputs:lineWidth.connect = </Root/Materials/UnitGridLinesMaterial/GridLineWidth.outputs:out>
                float3 inputs:position = (0, 0, 0) (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (20.367188, -246.52344)
                            float2 sizeInSubgraph = (139, 53)
                            int stackingOrderInSubgraph = 2593
                        }
                    }
                )
                float3 inputs:position.connect = </Root/Materials/UnitGridLinesMaterial/Position.outputs:out>
                float outputs:isOnAnyGridLine (
                    customData = {
                        dictionary realitykit = {
                            int stackingOrderInSubgraph = 2459
                        }
                    }
                )
                float outputs:isOnAnyGridLine.connect = </Root/Materials/UnitGridLinesMaterial/isOnGridUnit/Step.outputs:out>
                float3 outputs:isOnGridLine.connect = </Root/Materials/GraphNodes/isOnGridUnit/Oneminus.outputs:out>
                float outputs:isOnX (
                    customData = {
                        dictionary realitykit = {
                            int stackingOrderInSubgraph = 2474
                        }
                    }
                )
                float outputs:isOnX.connect = </Root/Materials/UnitGridLinesMaterial/isOnGridUnit/isOnXYZ.outputs:outx>
                float outputs:isOnY (
                    customData = {
                        dictionary realitykit = {
                            int stackingOrderInSubgraph = 2474
                        }
                    }
                )
                float outputs:isOnY.connect = </Root/Materials/UnitGridLinesMaterial/isOnGridUnit/isOnXYZ.outputs:outy>
                float outputs:isOnZ (
                    customData = {
                        dictionary realitykit = {
                            int stackingOrderInSubgraph = 2474
                        }
                    }
                )
                float outputs:isOnZ.connect = </Root/Materials/UnitGridLinesMaterial/isOnGridUnit/isOnXYZ.outputs:outz>
                float2 ui:nodegraph:node:pos = (-184.64354, -152.31183)
                float2 ui:nodegraph:node:size = (132, 217)
                int ui:nodegraph:node:stackingOrder = 3118
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:isOnGridLine", "outputs:Min_2_out", "outputs:isOnGridLine_1", "outputs:Combine3_out", "outputs:isOnGridLine", "outputs:Combine3_out", "outputs:isOnGridLine", "outputs:isOnGridLine", "outputs:isOnZ", "outputs:isOnY", "outputs:isOnX"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1183.9231, -181.43002)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (221.5, 153)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 3178

                def Shader "Fractional"
                {
                    uniform token info:id = "ND_realitykit_fractional_vector3"
                    float3 inputs:in.connect = </Root/Materials/GraphNodes/isOnGridUnit/Modulo.outputs:out>
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (440.43948, -246.068)
                    float2 ui:nodegraph:node:size = (154.5, 109)
                    int ui:nodegraph:node:stackingOrder = 3145
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Add_1"
                {
                    uniform token info:id = "ND_add_vector3"
                    float3 inputs:in1.connect = </Root/Materials/GraphNodes/isOnGridUnit.inputs:position>
                    float3 inputs:in2.connect = </Root/Materials/GraphNodes/isOnGridUnit/half_line.outputs:out>
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (191.32812, -237.08984)
                    float2 ui:nodegraph:node:size = (61.5, 36.5)
                    int ui:nodegraph:node:stackingOrder = 2632
                }

                def Shader "Modulo"
                {
                    uniform token info:id = "ND_modulo_vector3"
                    float3 inputs:in1.connect = </Root/Materials/GraphNodes/isOnGridUnit/Add_1.outputs:out>
                    float3 inputs:in2.connect = </Root/Materials/GraphNodes/isOnGridUnit.inputs:gridUnits>
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (287.91803, -230.76823)
                    float2 ui:nodegraph:node:size = (63, 38.5)
                    int ui:nodegraph:node:stackingOrder = 3147
                }

                def Shader "half_line"
                {
                    uniform token info:id = "ND_multiply_vector3FA"
                    float3 inputs:in1 = (0.5, 0.5, 0.5)
                    float inputs:in2.connect = </Root/Materials/GraphNodes/isOnGridUnit.inputs:lineWidth>
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (127.55859, -41.28125)
                    float2 ui:nodegraph:node:size = (60, 36)
                    int ui:nodegraph:node:stackingOrder = 3011
                }

                def Shader "Convert"
                {
                    uniform token info:id = "ND_convert_float_vector3"
                    float inputs:in.connect = </Root/Materials/GraphNodes/isOnGridUnit.inputs:lineWidth>
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (368.77362, 31.545897)
                    float2 ui:nodegraph:node:size = (135.5, 40)
                    int ui:nodegraph:node:stackingOrder = 3149
                }

                def Shader "Range"
                {
                    uniform token info:id = "ND_range_vector3"
                    bool inputs:doclamp = 1
                    float3 inputs:gamma
                    float3 inputs:in.connect = </Root/Materials/GraphNodes/isOnGridUnit/Fractional.outputs:out>
                    float3 inputs:inhigh.connect = </Root/Materials/GraphNodes/isOnGridUnit/Convert.outputs:out>
                    float3 inputs:inlow.connect = None
                    float3 inputs:outhigh = (1, 1, 1)
                    float3 inputs:outlow = (0, 0, 0)
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (671.4384, -290.68375)
                    float2 ui:nodegraph:node:size = (98, 217)
                    int ui:nodegraph:node:stackingOrder = 3160
                }

                def Shader "Oneminus"
                {
                    uniform token info:id = "ND_realitykit_oneminus_vector3"
                    float3 inputs:in.connect = </Root/Materials/GraphNodes/isOnGridUnit/Range.outputs:out>
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (830.97784, -213.45393)
                    float2 ui:nodegraph:node:size = (158, 109)
                    int ui:nodegraph:node:stackingOrder = 3162
                }
            }

            def NodeGraph "shouldDrawGridLine" (
                active = true
            )
            {
                reorder nameChildren = ["DotProduct", "Range", "Absval_1", "Step_1", "Oneminus", "Multiply", "Absval", "Step", "Convert", "Range_1", "Absval_2", "Step_2", "DotProduct_1", "Multiply_1", "Oneminus_1", "Absval_3", "Convert_1", "Step_3", "Absval_5", "Step_4", "Oneminus_2", "Convert_2", "Step_5", "Range_2", "DotProduct_2", "Multiply_2", "Absval_4", "absNormal"]
                float3 inputs:isOnGridUnit = (0, 0, 0) (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-461.29688, -203.3086)
                            float2 sizeInSubgraph = (148, 53)
                            int stackingOrderInSubgraph = 3456
                        }
                    }
                )
                float3 inputs:isOnGridUnit.connect = </Root/Materials/UnitGridLinesMaterial/isOnGridUnit.outputs:isOnGridLine>
                float3 inputs:objectNormal = (0, 0, 0) (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-668.4414, -53.09375)
                            float2 sizeInSubgraph = (152, 53)
                            int stackingOrderInSubgraph = 3448
                        }
                    }
                )
                float3 inputs:objectNormal.connect = </Root/Materials/UnitGridLinesMaterial/Normal.outputs:out>
                float outputs:drawGridLine (
                    customData = {
                        dictionary realitykit = {
                            int stackingOrderInSubgraph = 3308
                        }
                    }
                )
                float outputs:drawGridLine.connect = </Root/Materials/GraphNodes/shouldDrawGridLine/Step_6.outputs:out>
                float2 ui:nodegraph:node:pos = (1.7349224, 62.09968)
                float2 ui:nodegraph:node:size = (135, 127)
                int ui:nodegraph:node:stackingOrder = 3126
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (436.77734, -225.20312)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (167, 81)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 3581

                def Shader "Step_4"
                {
                    uniform token info:id = "ND_realitykit_step_vector3"
                    float3 inputs:edge = (0.001, 0.001, 0.001)
                    float3 inputs:in.connect = </Root/Materials/GraphNodes/shouldDrawGridLine/Oneminus_3.outputs:out>
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (-104.07654, -31.131935)
                    float2 ui:nodegraph:node:size = (129, 127)
                    int ui:nodegraph:node:stackingOrder = 3499
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:edge"]
                }

                def Shader "absNormal"
                {
                    uniform token info:id = "ND_absval_vector3"
                    float3 inputs:in.connect = </Root/Materials/GraphNodes/shouldDrawGridLine.inputs:objectNormal>
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (-490.27344, -52.652344)
                    float2 ui:nodegraph:node:size = (147.5, 53)
                    int ui:nodegraph:node:stackingOrder = 3452
                }

                def Shader "Oneminus_3"
                {
                    uniform token info:id = "ND_realitykit_oneminus_vector3"
                    float3 inputs:in.connect = </Root/Materials/GraphNodes/shouldDrawGridLine/absNormal.outputs:out>
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (-303.07422, -64.36328)
                    float2 ui:nodegraph:node:size = (158, 109)
                    int ui:nodegraph:node:stackingOrder = 3454
                }

                def Shader "DotProduct_3"
                {
                    uniform token info:id = "ND_dotproduct_vector3"
                    float3 inputs:in1.connect = </Root/Materials/GraphNodes/shouldDrawGridLine/Multiply.outputs:out>
                    float3 inputs:in2 = (1, 1, 1)
                    float3 inputs:in2.connect = None
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (-41.8125, -238.5039)
                    float2 ui:nodegraph:node:size = (169, 53)
                    int ui:nodegraph:node:stackingOrder = 3545
                }

                def Shader "Step_6"
                {
                    uniform token info:id = "ND_realitykit_step_float"
                    float inputs:edge = 0.01
                    float inputs:in.connect = </Root/Materials/GraphNodes/shouldDrawGridLine/DotProduct_3.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (214.80078, -244.22266)
                    float2 ui:nodegraph:node:size = (129, 127)
                    int ui:nodegraph:node:stackingOrder = 3581
                }

                def Shader "Multiply"
                {
                    uniform token info:id = "ND_multiply_vector3"
                    float3 inputs:in1.connect = </Root/Materials/GraphNodes/shouldDrawGridLine.inputs:isOnGridUnit>
                    float3 inputs:in2.connect = </Root/Materials/GraphNodes/shouldDrawGridLine/Step_4.outputs:out>
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (-258.43164, -245.9605)
                    float2 ui:nodegraph:node:size = (60, 36)
                    int ui:nodegraph:node:stackingOrder = 3534
                }
            }
        }

        def Material "UnitGridLinesMaterial"
        {
            reorder nameChildren = ["isOnGridUnit", "drawGridLine", "SeparateColor3Alpha", "Mix_1", "PreviewSurface", "Position", "GridLineColor", "BaseColor", "Normal", "GridUnits", "GridLineWidth", "Convert", "Mix"]
            color4f inputs:baseColor = (0.048647866, 0.70414114, 0.8340569, 0.105563164) (
                colorSpace = "srgb_displayp3"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-503.90234, 219.8711)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 3255
                    }
                }
            )
            color4f inputs:gridLineColor = (0.048647866, 0.70414114, 0.8340569, 1) (
                colorSpace = "srgb_displayp3"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-496.92188, 154.3086)
                        float2 sizeInSubgraph = (152, 53)
                        int stackingOrderInSubgraph = 3255
                    }
                }
            )
            float inputs:gridLineWidth = 0.01 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-496.1172, -127.08594)
                        float2 sizeInSubgraph = (155, 53)
                        int stackingOrderInSubgraph = 3309
                    }
                }
            )
            float3 inputs:gridUnits = (0.1, 0.1, 0.1) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-500.51172, -203.46484)
                        float2 sizeInSubgraph = (139, 53)
                        int stackingOrderInSubgraph = 3309
                    }
                }
            )
            prepend token outputs:mtlx:surface.connect = </Root/Materials/UnitGridLinesMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:mtlx:surface"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (770.0117, -0.3515625)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 3303

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                float inputs:clearcoat
                float inputs:clearcoatRoughness
                color3f inputs:diffuseColor.connect = </Root/Materials/UnitGridLinesMaterial/color3.outputs:out>
                color3f inputs:emissiveColor
                float inputs:ior
                float inputs:metallic
                float3 inputs:normal
                float inputs:occlusion
                float inputs:opacity.connect = </Root/Materials/UnitGridLinesMaterial/Extract.outputs:out>
                float inputs:opacityThreshold
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (565.8867, -63.664062)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 3300
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:diffuseColor", "inputs:diffuseColor", "inputs:diffuseColor"]
            }

            def Shader "Position"
            {
                uniform token info:id = "ND_position_vector3"
                string inputs:space = "model"
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-502.60938, -51.507812)
                float2 ui:nodegraph:node:size = (133.5, 40)
                int ui:nodegraph:node:stackingOrder = 3255
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "model"
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-507.91336, 66.82249)
                float2 ui:nodegraph:node:size = (128.5, 40)
                int ui:nodegraph:node:stackingOrder = 3255
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out", "outputs:out"]
            }

            def "isOnGridUnit" (
                active = true
                instanceable = true
                references = </Root/Materials/GraphNodes/isOnGridUnit>
            )
            {
                float3 inputs:gridUnits.connect = </Root/Materials/UnitGridLinesMaterial.inputs:gridUnits>
                float inputs:lineWidth.connect = </Root/Materials/UnitGridLinesMaterial.inputs:gridLineWidth>
                float3 inputs:position.connect = </Root/Materials/UnitGridLinesMaterial/Position.outputs:out>
                float2 ui:nodegraph:node:pos = (-247.43652, -117.3548)
                float2 ui:nodegraph:node:size = (130, 217)
                int ui:nodegraph:node:stackingOrder = 3138
            }

            def "drawGridLine" (
                active = true
                instanceable = true
                references = </Root/Materials/GraphNodes/shouldDrawGridLine>
            )
            {
                float3 inputs:isOnGridUnit.connect = </Root/Materials/UnitGridLinesMaterial/isOnGridUnit.outputs:isOnGridLine>
                float3 inputs:objectNormal.connect = </Root/Materials/UnitGridLinesMaterial/Normal.outputs:out>
                float2 ui:nodegraph:node:pos = (-65.608826, 37.056717)
                float2 ui:nodegraph:node:size = (133, 127)
                int ui:nodegraph:node:stackingOrder = 3162
            }

            def Shader "Mix_1"
            {
                uniform token info:id = "ND_mix_color4"
                color4f inputs:bg.connect = </Root/Materials/UnitGridLinesMaterial.inputs:baseColor>
                color4f inputs:fg.connect = </Root/Materials/UnitGridLinesMaterial.inputs:gridLineColor>
                prepend float inputs:mix.connect = </Root/Materials/UnitGridLinesMaterial/drawGridLine.outputs:drawGridLine>
                color4f outputs:out
                float2 ui:nodegraph:node:pos = (134.97598, 118.03256)
                float2 ui:nodegraph:node:size = (109, 145)
                int ui:nodegraph:node:stackingOrder = 3307
            }

            def Shader "color3"
            {
                uniform token info:id = "ND_convert_color4_color3"
                prepend color4f inputs:in.connect = </Root/Materials/UnitGridLinesMaterial/Mix_1.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (361.76953, -95.32031)
                float2 ui:nodegraph:node:size = (126, 53)
                int ui:nodegraph:node:stackingOrder = 3269
            }

            def Shader "Extract"
            {
                uniform token info:id = "ND_extract_color4"
                color4f inputs:in.connect = </Root/Materials/UnitGridLinesMaterial/Mix_1.outputs:out>
                int inputs:index = 3
                float outputs:out
                float2 ui:nodegraph:node:pos = (364.32422, -41.339844)
                float2 ui:nodegraph:node:size = (129.5, 40)
                int ui:nodegraph:node:stackingOrder = 3271
            }
        }

        def "LightGridMaterial" (
            active = true
            instanceable = true
            references = </Root/Materials/UnitGridLinesMaterial>
        )
        {
            color4f inputs:baseColor (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-503.90234, 219.8711)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 3155
                    }
                }
            )
            color4f inputs:gridLineColor (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-496.92188, 154.3086)
                        float2 sizeInSubgraph = (152, 53)
                        int stackingOrderInSubgraph = 3152
                    }
                }
            )
            float inputs:gridLineWidth = 0.01 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-505.5625, -127.08594)
                        float2 sizeInSubgraph = (156.5, 53)
                        int stackingOrderInSubgraph = 3255
                    }
                }
            )
            float3 inputs:gridUnits = (0.1, 0.1, 0.1) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-500.51172, -203.46484)
                        float2 sizeInSubgraph = (139, 53)
                        int stackingOrderInSubgraph = 3255
                    }
                }
            )
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
        }

        def Material "LineCountMaterial"
        {
            reorder nameChildren = ["PreviewSurface", "Texcoord", "Mix", "SeparateColor3Alpha_1"]
            color4f inputs:baseColor = (0.048647866, 0.70414114, 0.8340569, 0.105563164) (
                colorSpace = "srgb_displayp3"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-327.74615, 114.493996)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 46
                    }
                }
            )
            color4f inputs:gridLineColor = (0.048647866, 0.70414114, 0.8340569, 1) (
                colorSpace = "srgb_displayp3"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-320.7657, 48.931496)
                        float2 sizeInSubgraph = (152, 53)
                        int stackingOrderInSubgraph = 1513
                    }
                }
            )
            float2 inputs:lineCounts = (24, 12) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-325.4547, -134.94853)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 1496
                    }
                }
            )
            float2 inputs:lineWidths = (0.1, 0.1) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-322.09476, -55.543224)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 1397
                    }
                }
            )
            prepend token outputs:mtlx:surface.connect = </Root/Materials/LineCountMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1255.942, 100.31745)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 1468

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                color3f inputs:diffuseColor.connect = </Root/Materials/LineCountMaterial/Convert.outputs:out>
                float inputs:metallic
                float3 inputs:normal
                float inputs:opacity.connect = </Root/Materials/LineCountMaterial/Extract.outputs:out>
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (1051.4857, 42.804653)
                float2 ui:nodegraph:node:size = (148.5, 199)
                int ui:nodegraph:node:stackingOrder = 1470
            }

            def Shader "Texcoord"
            {
                uniform token info:id = "ND_texcoord_vector2"
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-312.2633, -215.35156)
                float2 ui:nodegraph:node:size = (180.5, 53)
                int ui:nodegraph:node:stackingOrder = 1506
            }

            def Shader "Mix"
            {
                uniform token info:id = "ND_mix_color4"
                color4f inputs:bg.connect = </Root/Materials/LineCountMaterial.inputs:baseColor>
                color4f inputs:fg.connect = </Root/Materials/LineCountMaterial.inputs:gridLineColor>
                float inputs:mix = 1
                float inputs:mix.connect = </Root/Materials/LineCountMaterial/Clamp.outputs:out>
                color4f outputs:out
                float2 ui:nodegraph:node:pos = (525.7761, 94.469475)
                float2 ui:nodegraph:node:size = (109, 145)
                int ui:nodegraph:node:stackingOrder = 1509
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:mix"]
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_color4_color3"
                prepend color4f inputs:in.connect = </Root/Materials/LineCountMaterial/Mix.outputs:out>
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (829.9323, 18.950775)
                float2 ui:nodegraph:node:size = (135.5, 40)
                int ui:nodegraph:node:stackingOrder = 1474
            }

            def Shader "Extract"
            {
                uniform token info:id = "ND_extract_color4"
                color4f inputs:in.connect = </Root/Materials/LineCountMaterial/Mix.outputs:out>
                int inputs:index = 3
                float outputs:out
                float2 ui:nodegraph:node:pos = (826.5305, 77.90654)
                float2 ui:nodegraph:node:size = (129.5, 40)
                int ui:nodegraph:node:stackingOrder = 1510
            }

            def Shader "Multiply"
            {
                uniform token info:id = "ND_multiply_vector2"
                float2 inputs:in1.connect = </Root/Materials/LineCountMaterial/Texcoord.outputs:out>
                float2 inputs:in2.connect = </Root/Materials/LineCountMaterial.inputs:lineCounts>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-144.90872, -198.1039)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 1455
            }

            def Shader "Add"
            {
                uniform token info:id = "ND_add_vector2"
                float2 inputs:in1.connect = </Root/Materials/LineCountMaterial/Multiply.outputs:out>
                float2 inputs:in2.connect = </Root/Materials/LineCountMaterial/Divide.outputs:out>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-49.906532, -169.25739)
                float2 ui:nodegraph:node:size = (61.5, 36.5)
                int ui:nodegraph:node:stackingOrder = 1455
            }

            def Shader "Fractional"
            {
                uniform token info:id = "ND_realitykit_fractional_vector2"
                float2 inputs:in.connect = </Root/Materials/LineCountMaterial/Add.outputs:out>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (93.68013, -259.43674)
                float2 ui:nodegraph:node:size = (154.5, 109)
                int ui:nodegraph:node:stackingOrder = 1486
            }

            def Shader "Step"
            {
                uniform token info:id = "ND_realitykit_step_vector2"
                float2 inputs:edge.connect = </Root/Materials/LineCountMaterial.inputs:lineWidths>
                float2 inputs:in.connect = </Root/Materials/LineCountMaterial/Fractional.outputs:out>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (272.6094, -224.78148)
                float2 ui:nodegraph:node:size = (129, 127)
                int ui:nodegraph:node:stackingOrder = 1502
            }

            def Shader "Oneminus"
            {
                uniform token info:id = "ND_realitykit_oneminus_vector2"
                float2 inputs:in.connect = </Root/Materials/LineCountMaterial/Step.outputs:out>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (438.71844, -193.35867)
                float2 ui:nodegraph:node:size = (158, 109)
                int ui:nodegraph:node:stackingOrder = 1491
            }

            def Shader "DotProduct"
            {
                uniform token info:id = "ND_dotproduct_vector2"
                float2 inputs:in1.connect = </Root/Materials/LineCountMaterial/Oneminus.outputs:out>
                float2 inputs:in2 = (1, 1)
                float outputs:out
                float2 ui:nodegraph:node:pos = (216.64203, -24.27116)
                float2 ui:nodegraph:node:size = (153.5, 53)
                int ui:nodegraph:node:stackingOrder = 1504
            }

            def Shader "Clamp"
            {
                uniform token info:id = "ND_clamp_float"
                float inputs:high
                float inputs:in.connect = </Root/Materials/LineCountMaterial/DotProduct.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (388.62827, -20.037619)
                float2 ui:nodegraph:node:size = (91, 145)
                int ui:nodegraph:node:stackingOrder = 1512
            }

            def Shader "Divide"
            {
                uniform token info:id = "ND_divide_vector2FA"
                prepend float2 inputs:in1.connect = </Root/Materials/LineCountMaterial.inputs:lineWidths>
                float inputs:in2 = 2
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (-147.54846, -128.12102)
                float2 ui:nodegraph:node:size = (61.5, 36)
                int ui:nodegraph:node:stackingOrder = 1501
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in2"]
            }
        }

        def "GlobeMaterial" (
            active = true
            instanceable = true
            references = </Root/Materials/LineCountMaterial>
        )
        {
            color4f inputs:baseColor (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-327.74615, 114.493996)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 46
                    }
                }
            )
            color4f inputs:gridLineColor (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-320.7657, 48.931496)
                        float2 sizeInSubgraph = (152, 53)
                        int stackingOrderInSubgraph = 1513
                    }
                }
            )
            float2 inputs:lineCounts (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-325.4547, -134.94853)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 1496
                    }
                }
            )
            float2 inputs:lineWidths (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-322.09476, -55.543224)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 1397
                    }
                }
            )
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
        }

        def "ABSPlasticMaterial" (
            active = true
            references = @BlackABSPlastic.usdz@
        )
        {
            color3f inputs:Basecolor_Tint (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-709.3466, -115.27705)
                        float2 sizeInSubgraph = (160.5, 53)
                        int stackingOrderInSubgraph = 2298
                    }
                }
            )
            float2 inputs:UV_Scale (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-725.2588, 351.55255)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 2297
                    }
                }
            )
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            over "Mix"
            {
                float2 ui:nodegraph:node:size = (109, 145)
            }

            over "Swizzle_1"
            {
                float2 ui:nodegraph:node:size = (145.5, 53)
            }

            over "Swizzle"
            {
                float2 ui:nodegraph:node:size = (133.5, 40)
            }

            over "Multiply_1"
            {
                float2 ui:nodegraph:node:size = (60, 36)
            }

            over "Dot"
            {
                float2 ui:nodegraph:node:size = (44, 18)
            }

            over "multiply"
            {
                float2 ui:nodegraph:node:size = (60, 36)
            }

            over "add"
            {
                float2 ui:nodegraph:node:size = (61.5, 36.5)
            }

            over "PreviewSurface"
            {
                float2 ui:nodegraph:node:size = (148.5, 199)
            }

            over "BaseColor"
            {
                float2 ui:nodegraph:node:size = (158.5, 235)
                int ui:nodegraph:node:stackingOrder = 2297
            }

            over "Roughness"
            {
                float2 ui:nodegraph:node:size = (158.5, 235)
            }

            over "Metallic"
            {
                float2 ui:nodegraph:node:size = (158.5, 235)
            }

            over "Normal"
            {
                float2 ui:nodegraph:node:size = (158.5, 235)
            }
        }

        def Xform "Holders" (
            active = true
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Cube "ABSPlasticHolder" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </Root/Materials/ABSPlasticMaterial> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 0.2
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    prepend token outputs:surface.connect = </Root/Materials/Holders/ABSPlasticHolder/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        color3f inputs:diffuseColor = (1, 1, 1)
                        float inputs:roughness = 0.75
                        token outputs:surface
                    }
                }
            }
        }
    }
}


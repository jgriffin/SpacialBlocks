#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 1.0 (409.100.15)"
    }
    defaultPrim = "GridMaterials"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "GridMaterials"
{
    reorder nameChildren = ["Materials", "Palette", "Sphere"]
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    float3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def "Materials" (
        active = true
        references = @Materials/GridMaterial.usda@
    )
    {
        reorder nameChildren = ["GridMaterial", "LightGridMaterial", "GlobeMaterial", "GraphNodes"]
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "GridMaterial" (
            active = true
        )
        {
            reorder nameChildren = ["DefaultSurfaceShader", "BaseColor3", "MaterialXPreviewSurface", "Texcoord", "Multiply", "Fractional", "BaseColor", "LineColor", "LineWidths", "LineCounts", "Remap", "Separate2", "Combine3", "Range", "Subtract", "Absval", "Min", "Alpha", "Fractional_1", "LineColor3"]
            color4f inputs:BaseColor = (0.89737034, 0.89737034, 0.89737034, 1) (
                colorSpace = "srgb_texture"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (67.29334, 432.31796)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 1487
                    }
                }
            )
            color4f inputs:LineColor = (0.55945957, 0.55945957, 0.55945957, 1) (
                colorSpace = "srgb_texture"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (66.555145, 327.8113)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 1486
                    }
                }
            )
            float2 inputs:LineCounts = (10, 10) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (77.921715, 140.37903)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 1416
                    }
                }
            )
            float2 inputs:LineWidths = (0.1, 0.1) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (72.04498, 230.3688)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 1415
                    }
                }
            )
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            over "MaterialXPreviewSurface"
            {
                float inputs:metallic = 0.1
                float inputs:opacity.connect = </GridMaterials/Materials/GridMaterial/Alpha.outputs:out>
                float inputs:opacityThreshold
                float2 ui:nodegraph:node:size = (207.5, 199)
                int ui:nodegraph:node:stackingOrder = 1523
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:opacityThreshold", "inputs:metallic"]
            }

            over "Remap"
            {
                color3f inputs:outhigh.connect = </GridMaterials/Materials/GridMaterial/BaseColor3.outputs:color3>
                color3f inputs:outlow.connect = </GridMaterials/Materials/GridMaterial/LineColor3.outputs:color3>
                float2 ui:nodegraph:node:pos = (1754.9023, 201.90625)
                float2 ui:nodegraph:node:size = (94, 181)
                int ui:nodegraph:node:stackingOrder = 1402
            }

            over "Fractional"
            {
                float2 inputs:in.connect = </GridMaterials/Materials/GridMaterial/Add.outputs:out>
                float2 ui:nodegraph:node:pos = (486.61386, 53.799084)
                float2 ui:nodegraph:node:size = (154.5, 109)
                int ui:nodegraph:node:stackingOrder = 1503
            }

            over "Multiply"
            {
                float2 inputs:in2.connect = </GridMaterials/Materials/GridMaterial.inputs:LineCounts>
                float2 ui:nodegraph:node:pos = (256.8672, 42.23828)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 1497
            }

            over "Combine3"
            {
                float2 ui:nodegraph:node:size = (145, 54)
            }

            over "Subtract" (
                active = false
            )
            {
                delete float2 inputs:in1.connect = </GridMaterials/Materials/GridMaterial/Fractional.outputs:out>
                float2 inputs:in2.connect = None
                float2 ui:nodegraph:node:pos = (614.65234, 126.72266)
                float2 ui:nodegraph:node:size = (61.5, 36)
                int ui:nodegraph:node:stackingOrder = 1512
            }

            over "Absval"
            {
                float2 inputs:in.connect = </GridMaterials/Materials/GridMaterial/Subtract_1.outputs:out>
                float2 ui:nodegraph:node:pos = (785.5703, 88.63672)
                float2 ui:nodegraph:node:size = (121.5, 53)
                int ui:nodegraph:node:stackingOrder = 1514
            }

            over "BaseColor" (
                active = false
            )
            {
                float2 ui:nodegraph:node:size = (151, 53)
                int ui:nodegraph:node:stackingOrder = 1390
            }

            over "LineColor" (
                active = false
            )
            {
                float2 ui:nodegraph:node:size = (151, 53)
                int ui:nodegraph:node:stackingOrder = 1390
            }

            over "Texcoord"
            {
                float2 ui:nodegraph:node:size = (180.5, 53)
            }

            over "LineCounts" (
                active = false
            )
            {
                float2 ui:nodegraph:node:size = (151.5, 53)
                int ui:nodegraph:node:stackingOrder = 1370
            }

            over "LineWidths" (
                active = false
            )
            {
                float2 ui:nodegraph:node:size = (150, 53)
                int ui:nodegraph:node:stackingOrder = 1371
            }

            over "Separate2"
            {
                float2 ui:nodegraph:node:pos = (1179.2645, 94.26802)
                float2 ui:nodegraph:node:size = (115, 127)
                int ui:nodegraph:node:stackingOrder = 1471
            }

            over "Min"
            {
                float2 ui:nodegraph:node:size = (113, 40)
            }

            over "Range"
            {
                float2 inputs:in.connect = </GridMaterials/Materials/GridMaterial/Fractional.outputs:out>
                float2 inputs:inhigh.connect = </GridMaterials/Materials/GridMaterial.inputs:LineWidths>
                float2 inputs:inlow = (0, 0)
                float2 inputs:inlow.connect = </GridMaterials/Materials/GridMaterial.inputs:LineWidths>
                float2 ui:nodegraph:node:size = (98, 217)
                int ui:nodegraph:node:stackingOrder = 1516
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:inhigh", "inputs:inlow"]
            }

            def Shader "Alpha"
            {
                uniform token info:id = "ND_remap_float"
                float inputs:in.connect = </GridMaterials/Materials/GridMaterial/Min.outputs:out>
                float inputs:inhigh
                float inputs:inlow
                float inputs:outhigh.connect = </GridMaterials/Materials/GridMaterial/BaseColor3.outputs:alpha>
                float inputs:outlow.connect = </GridMaterials/Materials/GridMaterial/LineColor3.outputs:alpha>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1754.418, 408.22266)
                float2 ui:nodegraph:node:size = (94, 181)
                int ui:nodegraph:node:stackingOrder = 1407
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
            }

            def "LineColor3" (
                active = true
                instanceable = true
                references = </GridMaterials/Materials/GraphNodes/SeparateColor3Alpha>
            )
            {
                color4f inputs:Color4 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (75.75, 81.5)
                            float2 sizeInSubgraph = (133, 53)
                            int stackingOrderInSubgraph = 1421
                        }
                    }
                )
                color4f inputs:Color4.connect = </GridMaterials/Materials/GridMaterial.inputs:LineColor>
                float2 ui:nodegraph:node:pos = (318.2176, 311.96417)
                float2 ui:nodegraph:node:size = (118, 127)
                int ui:nodegraph:node:stackingOrder = 1476
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (161.5, 99)
            }

            def "BaseColor3" (
                active = true
                instanceable = true
                references = </GridMaterials/Materials/GraphNodes/SeparateColor3Alpha>
            )
            {
                color4f inputs:Color4 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (75.75, 81.5)
                            float2 sizeInSubgraph = (133, 53)
                            int stackingOrderInSubgraph = 1421
                        }
                    }
                )
                color4f inputs:Color4.connect = </GridMaterials/Materials/GridMaterial.inputs:BaseColor>
                float2 ui:nodegraph:node:pos = (322.8635, 467.11893)
                float2 ui:nodegraph:node:size = (122, 127)
                int ui:nodegraph:node:stackingOrder = 1481
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (164, 99)
            }

            def Shader "Multiply_1"
            {
                uniform token info:id = "ND_multiply_vector2"
                float2 inputs:in1.connect = </GridMaterials/Materials/GridMaterial.inputs:LineWidths>
                float2 inputs:in2 = (0.5, 0.5)
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (256.59766, 146.23828)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 1511
            }

            def Shader "Add"
            {
                uniform token info:id = "ND_add_vector2"
                float2 inputs:in1.connect = </GridMaterials/Materials/GridMaterial/Multiply.outputs:out>
                float2 inputs:in2.connect = </GridMaterials/Materials/GridMaterial/Multiply_1.outputs:out>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (340.26172, 70.515625)
                float2 ui:nodegraph:node:size = (61.5, 36.5)
                int ui:nodegraph:node:stackingOrder = 1501
            }

            def Shader "Subtract_1"
            {
                uniform token info:id = "ND_subtract_vector2"
                float2 inputs:in1.connect = </GridMaterials/Materials/GridMaterial/Fractional.outputs:out>
                float2 inputs:in2.connect = </GridMaterials/Materials/GridMaterial.inputs:LineWidths>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (625.15234, 127.109375)
                float2 ui:nodegraph:node:size = (61.5, 36)
                int ui:nodegraph:node:stackingOrder = 1518
            }

            def Shader "Multiply_2"
            {
                uniform token info:id = "ND_multiply_vector2"
                float2 inputs:in1.connect = </GridMaterials/Materials/GridMaterial.inputs:LineWidths>
                float2 inputs:in2 = (1.2, 1.2)
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (605.3672, 215.5)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 1521
            }
        }

        def "LightGridMaterial" (
            active = true
            instanceable = true
            references = </GridMaterials/Materials/GridMaterial>
        )
        {
            color4f inputs:BaseColor = (0.048647866, 0.70414114, 0.8340569, 0.19900632) (
                colorSpace = "srgb_displayp3"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (67.29334, 432.31796)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 1365
                    }
                }
            )
            color4f inputs:LineColor = (0.048647866, 0.70414114, 0.8340569, 1) (
                colorSpace = "srgb_displayp3"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (66.555145, 327.8113)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 1390
                    }
                }
            )
            float2 inputs:LineCounts = (10, 10) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (77.921715, 140.37903)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 1367
                    }
                }
            )
            float2 inputs:LineWidths = (0.05, 0.05) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (72.04498, 230.3688)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 1369
                    }
                }
            )
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
        }

        def "GlobeMaterial" (
            active = true
            instanceable = true
            references = </GridMaterials/Materials/GridMaterial>
        )
        {
            color4f inputs:BaseColor (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (67.29334, 432.31796)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 1413
                    }
                }
            )
            color4f inputs:LineColor (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (66.555145, 327.8113)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 1390
                    }
                }
            )
            float2 inputs:LineCounts = (24, 12) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (77.921715, 140.37903)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 1416
                    }
                }
            )
            float2 inputs:LineWidths (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (72.04498, 230.3688)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 1415
                    }
                }
            )
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
        }

        def Xform "GraphNodes" (
            active = true
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def NodeGraph "SeparateColor3Alpha"
            {
                reorder nameChildren = ["Color3", "Separate4"]
                color4f inputs:Color4 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (75.75, 81.5)
                            float2 sizeInSubgraph = (133, 53)
                            int stackingOrderInSubgraph = 1421
                        }
                    }
                )
                color4f inputs:Color4.connect = </Root/GridMaterialScene/GridMaterialRoot/GridMaterial.inputs:LineColor>
                float outputs:alpha (
                    customData = {
                        dictionary realitykit = {
                            int stackingOrderInSubgraph = 1419
                        }
                    }
                )
                float outputs:alpha.connect = </GridMaterials/Materials/GraphNodes/SeparateColor3Alpha/Separate4.outputs:outa>
                color3f outputs:color3 (
                    customData = {
                        dictionary realitykit = {
                            int stackingOrderInSubgraph = 1419
                        }
                    }
                )
                color3f outputs:color3.connect = </GridMaterials/Materials/GraphNodes/SeparateColor3Alpha/Color3.outputs:out>
                float2 ui:nodegraph:node:pos = (423.2551, 387.63382)
                float2 ui:nodegraph:node:size = (185, 127)
                int ui:nodegraph:node:stackingOrder = 1376
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (691.125, 76.04297)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (164, 99)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 1428

                def Shader "Separate4"
                {
                    uniform token info:id = "ND_separate4_color4"
                    color4f inputs:in.connect = </GridMaterials/Materials/GraphNodes/SeparateColor3Alpha.inputs:Color4>
                    float outputs:outa
                    float outputs:outb
                    float outputs:outg
                    float outputs:outr
                    float2 ui:nodegraph:node:pos = (269.25, 81.5)
                    float2 ui:nodegraph:node:size = (115.5, 163)
                    int ui:nodegraph:node:stackingOrder = 1416
                }

                def Shader "Color3"
                {
                    uniform token info:id = "ND_combine3_color3"
                    float inputs:in1.connect = </GridMaterials/Materials/GraphNodes/SeparateColor3Alpha/Separate4.outputs:outr>
                    float inputs:in2.connect = </GridMaterials/Materials/GraphNodes/SeparateColor3Alpha/Separate4.outputs:outg>
                    float inputs:in3.connect = </GridMaterials/Materials/GraphNodes/SeparateColor3Alpha/Separate4.outputs:outb>
                    color3f outputs:out
                    float2 ui:nodegraph:node:pos = (501.6211, 23.792969)
                    float2 ui:nodegraph:node:size = (131.5, 54)
                    int ui:nodegraph:node:stackingOrder = 1423
                }
            }
        }
    }

    def Xform "Palette" (
        active = true
    )
    {
        reorder nameChildren = ["globeMaterialHolder", "gridMaterialHolder", "lightGridMaterialHolder"]
        def Sphere "globeMaterialHolder" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </GridMaterials/Materials/GlobeMaterial> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "gridMaterialHolder" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </GridMaterials/Materials/GridMaterial> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0.4, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "lightGridMaterialHolder" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </GridMaterials/Materials/LightGridMaterial> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0.8, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }
}


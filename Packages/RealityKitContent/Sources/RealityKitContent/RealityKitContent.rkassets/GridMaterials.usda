#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 1.0 (409.100.15)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Materials", "Palette", "UnitGridLine", "UnitGridLineMaterial", "NodeGraph"]
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    float3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def "Materials" (
        active = true
        references = @Materials/GridMaterial.usda@
    )
    {
        reorder nameChildren = ["UnitGridLinesMaterial", "GridMaterial", "LightGridMaterial", "GlobeMaterial", "GraphNodes"]
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "GridMaterial" (
            active = true
        )
        {
            reorder nameChildren = ["DefaultSurfaceShader", "BaseColor3", "Multiply_1", "Add", "Subtract_1", "Multiply_2", "MaterialXPreviewSurface", "Texcoord", "Multiply", "Fractional", "BaseColor", "LineColor", "LineWidths", "LineCounts", "Remap", "Separate2", "Combine3", "Range", "Subtract", "Absval", "Min", "Alpha", "LineColor3", "UnitGridLineMaterial"]
            color4f inputs:BaseColor = (0.89737034, 0.89737034, 0.89737034, 1) (
                colorSpace = "srgb_texture"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (67.29334, 432.31796)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 1765
                    }
                }
            )
            color4f inputs:LineColor = (0.55945957, 0.55945957, 0.55945957, 1) (
                colorSpace = "srgb_texture"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (66.555145, 327.8113)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 1765
                    }
                }
            )
            float2 inputs:LineCounts = (10, 10) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (70.171875, 134.13281)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 1765
                    }
                }
            )
            float2 inputs:LineWidths = (0.1, 0.1) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (72.04498, 230.3688)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 1765
                    }
                }
            )
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 1682

            over "MaterialXPreviewSurface"
            {
                float inputs:metallic = 0.1
                float inputs:opacity.connect = </Root/Materials/GridMaterial/Alpha.outputs:out>
                float inputs:opacityThreshold
                float2 ui:nodegraph:node:size = (207.5, 199)
                int ui:nodegraph:node:stackingOrder = 1682
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:opacityThreshold", "inputs:metallic", "inputs:opacity"]
            }

            over "Remap"
            {
                color3f inputs:outhigh.connect = </Root/Materials/GridMaterial/BaseColor3.outputs:color3>
                color3f inputs:outlow.connect = </Root/Materials/GridMaterial/LineColor3.outputs:color3>
                float2 ui:nodegraph:node:pos = (1754.9023, 201.90625)
                float2 ui:nodegraph:node:size = (94, 181)
                int ui:nodegraph:node:stackingOrder = 1765
            }

            over "Fractional"
            {
                float2 inputs:in.connect = </Root/Materials/GridMaterial/Add.outputs:out>
                float2 ui:nodegraph:node:pos = (486.61386, 53.799084)
                float2 ui:nodegraph:node:size = (154.5, 109)
                int ui:nodegraph:node:stackingOrder = 1765
            }

            over "Multiply"
            {
                float2 inputs:in2.connect = </Root/Materials/GridMaterial.inputs:LineCounts>
                float2 ui:nodegraph:node:pos = (256.8672, 42.23828)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 1765
            }

            over "Combine3"
            {
                float2 ui:nodegraph:node:size = (145, 54)
                int ui:nodegraph:node:stackingOrder = 1765
            }

            over "Subtract" (
                active = false
            )
            {
                delete float2 inputs:in1.connect = </Root/Materials/GridMaterial/Fractional.outputs:out>
                float2 inputs:in2.connect = None
                float2 ui:nodegraph:node:pos = (614.65234, 126.72266)
                float2 ui:nodegraph:node:size = (61.5, 36)
                int ui:nodegraph:node:stackingOrder = 1512
            }

            over "Absval"
            {
                float2 inputs:in.connect = </Root/Materials/GridMaterial/Subtract_1.outputs:out>
                float2 ui:nodegraph:node:pos = (785.5703, 88.63672)
                float2 ui:nodegraph:node:size = (121.5, 53)
                int ui:nodegraph:node:stackingOrder = 1765
            }

            over "BaseColor" (
                active = false
            )
            {
                float2 ui:nodegraph:node:size = (151, 53)
                int ui:nodegraph:node:stackingOrder = 1390
            }

            over "LineColor" (
                active = false
            )
            {
                float2 ui:nodegraph:node:size = (151, 53)
                int ui:nodegraph:node:stackingOrder = 1390
            }

            over "Texcoord"
            {
                float2 ui:nodegraph:node:size = (180.5, 53)
                int ui:nodegraph:node:stackingOrder = 1766
            }

            over "LineCounts" (
                active = false
            )
            {
                float2 ui:nodegraph:node:size = (151.5, 53)
                int ui:nodegraph:node:stackingOrder = 1370
            }

            over "LineWidths" (
                active = false
            )
            {
                float2 ui:nodegraph:node:size = (150, 53)
                int ui:nodegraph:node:stackingOrder = 1371
            }

            over "Separate2"
            {
                float2 ui:nodegraph:node:pos = (1179.2645, 94.26802)
                float2 ui:nodegraph:node:size = (115, 127)
                int ui:nodegraph:node:stackingOrder = 1765
            }

            over "Min"
            {
                float2 ui:nodegraph:node:size = (113, 40)
                int ui:nodegraph:node:stackingOrder = 1765
            }

            over "Range"
            {
                float2 inputs:in.connect = </Root/Materials/GridMaterial/Fractional.outputs:out>
                float2 inputs:inhigh.connect = </Root/Materials/GridMaterial.inputs:LineWidths>
                float2 inputs:inlow = (0, 0)
                float2 inputs:inlow.connect = </Root/Materials/GridMaterial.inputs:LineWidths>
                float2 ui:nodegraph:node:size = (98, 217)
                int ui:nodegraph:node:stackingOrder = 1765
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:inhigh", "inputs:inlow"]
            }

            def Shader "Alpha"
            {
                uniform token info:id = "ND_remap_float"
                float inputs:in.connect = </Root/Materials/GridMaterial/Min.outputs:out>
                float inputs:inhigh
                float inputs:inlow
                float inputs:outhigh.connect = </Root/Materials/GridMaterial/BaseColor3.outputs:alpha>
                float inputs:outlow.connect = </Root/Materials/GridMaterial/LineColor3.outputs:alpha>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1754.418, 408.22266)
                float2 ui:nodegraph:node:size = (94, 181)
                int ui:nodegraph:node:stackingOrder = 1765
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
            }

            def "LineColor3" (
                active = true
                instanceable = true
                references = </Root/Materials/GraphNodes/SeparateColor3Alpha>
            )
            {
                color4f inputs:Color4 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (75.75, 81.5)
                            float2 sizeInSubgraph = (133, 53)
                            int stackingOrderInSubgraph = 1421
                        }
                    }
                )
                color4f inputs:Color4.connect = </Root/Materials/GridMaterial.inputs:LineColor>
                float2 ui:nodegraph:node:pos = (318.2176, 311.96417)
                float2 ui:nodegraph:node:size = (118, 127)
                int ui:nodegraph:node:stackingOrder = 1765
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (161.5, 99)
            }

            def "BaseColor3" (
                active = true
                instanceable = true
                references = </Root/Materials/GraphNodes/SeparateColor3Alpha>
            )
            {
                color4f inputs:Color4 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (75.75, 81.5)
                            float2 sizeInSubgraph = (133, 53)
                            int stackingOrderInSubgraph = 1421
                        }
                    }
                )
                color4f inputs:Color4.connect = </Root/Materials/GridMaterial.inputs:BaseColor>
                float2 ui:nodegraph:node:pos = (322.8635, 467.11893)
                float2 ui:nodegraph:node:size = (122, 127)
                int ui:nodegraph:node:stackingOrder = 1765
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (164, 99)
            }

            def Shader "Multiply_1"
            {
                uniform token info:id = "ND_multiply_vector2"
                float2 inputs:in1.connect = </Root/Materials/GridMaterial.inputs:LineWidths>
                float2 inputs:in2 = (0.5, 0.5)
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (256.59766, 146.23828)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 1765
            }

            def Shader "Add"
            {
                uniform token info:id = "ND_add_vector2"
                float2 inputs:in1.connect = </Root/Materials/GridMaterial/Multiply.outputs:out>
                float2 inputs:in2.connect = </Root/Materials/GridMaterial/Multiply_1.outputs:out>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (340.26172, 70.515625)
                float2 ui:nodegraph:node:size = (61.5, 36.5)
                int ui:nodegraph:node:stackingOrder = 1765
            }

            def Shader "Subtract_1"
            {
                uniform token info:id = "ND_subtract_vector2"
                float2 inputs:in1.connect = </Root/Materials/GridMaterial/Fractional.outputs:out>
                float2 inputs:in2.connect = </Root/Materials/GridMaterial.inputs:LineWidths>
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (625.15234, 127.109375)
                float2 ui:nodegraph:node:size = (61.5, 36)
                int ui:nodegraph:node:stackingOrder = 1765
            }

            def Shader "Multiply_2"
            {
                uniform token info:id = "ND_multiply_vector2"
                float2 inputs:in1.connect = </Root/Materials/GridMaterial.inputs:LineWidths>
                float2 inputs:in2 = (1.2, 1.2)
                float2 outputs:out
                float2 ui:nodegraph:node:pos = (605.3672, 215.5)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 1765
            }
        }

        def "LightGridMaterial" (
            active = true
            instanceable = true
            references = </Root/Materials/GridMaterial>
        )
        {
            color4f inputs:BaseColor = (0.048647866, 0.70414114, 0.8340569, 0.19900632) (
                colorSpace = "srgb_displayp3"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (67.29334, 432.31796)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 1365
                    }
                }
            )
            color4f inputs:LineColor = (0.048647866, 0.70414114, 0.8340569, 1) (
                colorSpace = "srgb_displayp3"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (66.555145, 327.8113)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 1390
                    }
                }
            )
            float2 inputs:LineCounts = (10, 10) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (77.921715, 140.37903)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 1367
                    }
                }
            )
            float2 inputs:LineWidths = (0.05, 0.05) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (72.04498, 230.3688)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 1369
                    }
                }
            )
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
        }

        def "GlobeMaterial" (
            active = true
            instanceable = true
            references = </Root/Materials/GridMaterial>
        )
        {
            color4f inputs:BaseColor (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (67.29334, 432.31796)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 1413
                    }
                }
            )
            color4f inputs:LineColor (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (66.555145, 327.8113)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 1390
                    }
                }
            )
            float2 inputs:LineCounts = (24, 12) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (77.921715, 140.37903)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 1416
                    }
                }
            )
            float2 inputs:LineWidths (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (72.04498, 230.3688)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 1415
                    }
                }
            )
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
        }

        def Xform "GraphNodes" (
            active = true
        )
        {
            reorder nameChildren = ["SeparateColor3Alpha", "isOnGridUnit", "drawGridLine", "SeparateColor3Alpha_1"]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def NodeGraph "SeparateColor3Alpha"
            {
                reorder nameChildren = ["Color3", "Separate4"]
                color4f inputs:Color4 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (75.75, 81.5)
                            float2 sizeInSubgraph = (133, 53)
                            int stackingOrderInSubgraph = 1421
                        }
                    }
                )
                color4f inputs:Color4.connect = </Root/GridMaterialScene/GridMaterialRoot/GridMaterial.inputs:LineColor>
                float outputs:alpha (
                    customData = {
                        dictionary realitykit = {
                            int stackingOrderInSubgraph = 1419
                        }
                    }
                )
                float outputs:alpha.connect = </Root/Materials/GraphNodes/SeparateColor3Alpha/Separate4.outputs:outa>
                color3f outputs:color3 (
                    customData = {
                        dictionary realitykit = {
                            int stackingOrderInSubgraph = 1419
                        }
                    }
                )
                color3f outputs:color3.connect = </Root/Materials/GraphNodes/SeparateColor3Alpha/Color3.outputs:out>
                float2 ui:nodegraph:node:pos = (423.2551, 387.63382)
                float2 ui:nodegraph:node:size = (185, 127)
                int ui:nodegraph:node:stackingOrder = 1376
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (691.125, 76.04297)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (164, 99)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 1428

                def Shader "Separate4"
                {
                    uniform token info:id = "ND_separate4_color4"
                    color4f inputs:in.connect = </Root/Materials/GraphNodes/SeparateColor3Alpha.inputs:Color4>
                    float outputs:outa
                    float outputs:outb
                    float outputs:outg
                    float outputs:outr
                    float2 ui:nodegraph:node:pos = (269.25, 81.5)
                    float2 ui:nodegraph:node:size = (115.5, 163)
                    int ui:nodegraph:node:stackingOrder = 1416
                }

                def Shader "Color3"
                {
                    uniform token info:id = "ND_combine3_color3"
                    float inputs:in1.connect = </Root/Materials/GraphNodes/SeparateColor3Alpha/Separate4.outputs:outr>
                    float inputs:in2.connect = </Root/Materials/GraphNodes/SeparateColor3Alpha/Separate4.outputs:outg>
                    float inputs:in3.connect = </Root/Materials/GraphNodes/SeparateColor3Alpha/Separate4.outputs:outb>
                    color3f outputs:out
                    float2 ui:nodegraph:node:pos = (501.6211, 23.792969)
                    float2 ui:nodegraph:node:size = (131.5, 54)
                    int ui:nodegraph:node:stackingOrder = 1423
                }
            }

            def NodeGraph "isOnGridUnit"
            {
                reorder nameChildren = ["Fractional", "Add_1", "isOnXYZ", "Absval", "half_line", "Oneminus_1", "Convert", "isNotZero", "Range", "Step", "Add_2", "Add_3", "Oneminus", "Multiply", "Modulo"]
                float3 inputs:gridUnits = (0.1, 0.1, 0.1) (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (21.1875, -126.078125)
                            float2 sizeInSubgraph = (139, 53)
                            int stackingOrderInSubgraph = 3143
                        }
                    }
                )
                float3 inputs:gridUnits.connect = </Root/Materials/UnitGridLinesMaterial/GridUnits.outputs:out>
                float inputs:lineWidth = 0.01 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (18.117188, 36.359375)
                            float2 sizeInSubgraph = (126.5, 53)
                            int stackingOrderInSubgraph = 3013
                        }
                    }
                )
                float inputs:lineWidth.connect = </Root/Materials/UnitGridLinesMaterial/GridLineWidth.outputs:out>
                float3 inputs:position = (0, 0, 0) (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (20.367188, -246.52344)
                            float2 sizeInSubgraph = (139, 53)
                            int stackingOrderInSubgraph = 2593
                        }
                    }
                )
                float3 inputs:position.connect = </Root/Materials/UnitGridLinesMaterial/Position.outputs:out>
                float outputs:isOnAnyGridLine (
                    customData = {
                        dictionary realitykit = {
                            int stackingOrderInSubgraph = 2459
                        }
                    }
                )
                float outputs:isOnAnyGridLine.connect = </Root/Materials/UnitGridLinesMaterial/isOnGridUnit/Step.outputs:out>
                float3 outputs:isOnGridLine.connect = </Root/Materials/GraphNodes/isOnGridUnit/Oneminus.outputs:out>
                float outputs:isOnX (
                    customData = {
                        dictionary realitykit = {
                            int stackingOrderInSubgraph = 2474
                        }
                    }
                )
                float outputs:isOnX.connect = </Root/Materials/UnitGridLinesMaterial/isOnGridUnit/isOnXYZ.outputs:outx>
                float outputs:isOnY (
                    customData = {
                        dictionary realitykit = {
                            int stackingOrderInSubgraph = 2474
                        }
                    }
                )
                float outputs:isOnY.connect = </Root/Materials/UnitGridLinesMaterial/isOnGridUnit/isOnXYZ.outputs:outy>
                float outputs:isOnZ (
                    customData = {
                        dictionary realitykit = {
                            int stackingOrderInSubgraph = 2474
                        }
                    }
                )
                float outputs:isOnZ.connect = </Root/Materials/UnitGridLinesMaterial/isOnGridUnit/isOnXYZ.outputs:outz>
                float2 ui:nodegraph:node:pos = (-184.64354, -152.31183)
                float2 ui:nodegraph:node:size = (132, 217)
                int ui:nodegraph:node:stackingOrder = 3118
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:isOnGridLine", "outputs:Min_2_out", "outputs:isOnGridLine_1", "outputs:Combine3_out", "outputs:isOnGridLine", "outputs:Combine3_out", "outputs:isOnGridLine", "outputs:isOnGridLine", "outputs:isOnZ", "outputs:isOnY", "outputs:isOnX"]
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1183.9231, -181.43002)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (221.5, 153)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 3178

                def Shader "Fractional"
                {
                    uniform token info:id = "ND_realitykit_fractional_vector3"
                    float3 inputs:in.connect = </Root/Materials/GraphNodes/isOnGridUnit/Modulo.outputs:out>
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (440.43948, -246.068)
                    float2 ui:nodegraph:node:size = (154.5, 109)
                    int ui:nodegraph:node:stackingOrder = 3145
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
                }

                def Shader "Add_1"
                {
                    uniform token info:id = "ND_add_vector3"
                    float3 inputs:in1.connect = </Root/Materials/GraphNodes/isOnGridUnit.inputs:position>
                    float3 inputs:in2.connect = </Root/Materials/GraphNodes/isOnGridUnit/half_line.outputs:out>
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (191.32812, -237.08984)
                    float2 ui:nodegraph:node:size = (61.5, 36.5)
                    int ui:nodegraph:node:stackingOrder = 2632
                }

                def Shader "Modulo"
                {
                    uniform token info:id = "ND_modulo_vector3"
                    float3 inputs:in1.connect = </Root/Materials/GraphNodes/isOnGridUnit/Add_1.outputs:out>
                    float3 inputs:in2.connect = </Root/Materials/GraphNodes/isOnGridUnit.inputs:gridUnits>
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (287.91803, -230.76823)
                    float2 ui:nodegraph:node:size = (63, 38.5)
                    int ui:nodegraph:node:stackingOrder = 3147
                }

                def Shader "half_line"
                {
                    uniform token info:id = "ND_multiply_vector3FA"
                    float3 inputs:in1 = (0.5, 0.5, 0.5)
                    float inputs:in2.connect = </Root/Materials/GraphNodes/isOnGridUnit.inputs:lineWidth>
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (127.55859, -41.28125)
                    float2 ui:nodegraph:node:size = (60, 36)
                    int ui:nodegraph:node:stackingOrder = 3011
                }

                def Shader "Convert"
                {
                    uniform token info:id = "ND_convert_float_vector3"
                    float inputs:in.connect = </Root/Materials/GraphNodes/isOnGridUnit.inputs:lineWidth>
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (368.77362, 31.545897)
                    float2 ui:nodegraph:node:size = (135.5, 40)
                    int ui:nodegraph:node:stackingOrder = 3149
                }

                def Shader "Range"
                {
                    uniform token info:id = "ND_range_vector3"
                    bool inputs:doclamp = 1
                    float3 inputs:gamma
                    float3 inputs:in.connect = </Root/Materials/GraphNodes/isOnGridUnit/Fractional.outputs:out>
                    float3 inputs:inhigh.connect = </Root/Materials/GraphNodes/isOnGridUnit/Convert.outputs:out>
                    float3 inputs:inlow.connect = None
                    float3 inputs:outhigh = (1, 1, 1)
                    float3 inputs:outlow = (0, 0, 0)
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (671.4384, -290.68375)
                    float2 ui:nodegraph:node:size = (98, 217)
                    int ui:nodegraph:node:stackingOrder = 3160
                }

                def Shader "Oneminus"
                {
                    uniform token info:id = "ND_realitykit_oneminus_vector3"
                    float3 inputs:in.connect = </Root/Materials/GraphNodes/isOnGridUnit/Range.outputs:out>
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (830.97784, -213.45393)
                    float2 ui:nodegraph:node:size = (158, 109)
                    int ui:nodegraph:node:stackingOrder = 3162
                }
            }

            def NodeGraph "drawGridLine" (
                active = true
            )
            {
                reorder nameChildren = ["DotProduct", "Range", "Absval_1", "Step_1", "Oneminus", "Multiply", "Absval", "Step", "Convert", "Range_1", "Absval_2", "Step_2", "DotProduct_1", "Multiply_1", "Oneminus_1", "Absval_3", "Convert_1", "Step_3", "Absval_5", "Step_4", "Oneminus_2", "Convert_2", "Step_5", "Range_2", "DotProduct_2", "Multiply_2", "Absval_4", "absNormal"]
                float3 inputs:isOnGridUnit = (0, 0, 0) (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-461.29688, -203.3086)
                            float2 sizeInSubgraph = (148, 53)
                            int stackingOrderInSubgraph = 3456
                        }
                    }
                )
                float3 inputs:isOnGridUnit.connect = </Root/Materials/UnitGridLinesMaterial/isOnGridUnit.outputs:isOnGridLine>
                float3 inputs:objectNormal = (0, 0, 0) (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-668.4414, -53.09375)
                            float2 sizeInSubgraph = (152, 53)
                            int stackingOrderInSubgraph = 3448
                        }
                    }
                )
                float3 inputs:objectNormal.connect = </Root/Materials/UnitGridLinesMaterial/Normal.outputs:out>
                float outputs:drawGridLine (
                    customData = {
                        dictionary realitykit = {
                            int stackingOrderInSubgraph = 3308
                        }
                    }
                )
                float outputs:drawGridLine.connect = </Root/Materials/GraphNodes/drawGridLine/Step_6.outputs:out>
                float2 ui:nodegraph:node:pos = (1.7349224, 62.09968)
                float2 ui:nodegraph:node:size = (135, 127)
                int ui:nodegraph:node:stackingOrder = 3126
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (436.77734, -225.20312)
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (167, 81)
                int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 3581

                def Shader "Step_4"
                {
                    uniform token info:id = "ND_realitykit_step_vector3"
                    float3 inputs:edge = (0.001, 0.001, 0.001)
                    float3 inputs:in.connect = </Root/Materials/GraphNodes/drawGridLine/Oneminus_3.outputs:out>
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (-104.07654, -31.131935)
                    float2 ui:nodegraph:node:size = (129, 127)
                    int ui:nodegraph:node:stackingOrder = 3499
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:edge"]
                }

                def Shader "absNormal"
                {
                    uniform token info:id = "ND_absval_vector3"
                    float3 inputs:in.connect = </Root/Materials/GraphNodes/drawGridLine.inputs:objectNormal>
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (-490.27344, -52.652344)
                    float2 ui:nodegraph:node:size = (147.5, 53)
                    int ui:nodegraph:node:stackingOrder = 3452
                }

                def Shader "Oneminus_3"
                {
                    uniform token info:id = "ND_realitykit_oneminus_vector3"
                    float3 inputs:in.connect = </Root/Materials/GraphNodes/drawGridLine/absNormal.outputs:out>
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (-303.07422, -64.36328)
                    float2 ui:nodegraph:node:size = (158, 109)
                    int ui:nodegraph:node:stackingOrder = 3454
                }

                def Shader "DotProduct_3"
                {
                    uniform token info:id = "ND_dotproduct_vector3"
                    float3 inputs:in1.connect = </Root/Materials/GraphNodes/drawGridLine/Multiply.outputs:out>
                    float3 inputs:in2 = (1, 1, 1)
                    float3 inputs:in2.connect = None
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (-41.8125, -238.5039)
                    float2 ui:nodegraph:node:size = (169, 53)
                    int ui:nodegraph:node:stackingOrder = 3545
                }

                def Shader "Step_6"
                {
                    uniform token info:id = "ND_realitykit_step_float"
                    float inputs:edge = 0.01
                    float inputs:in.connect = </Root/Materials/GraphNodes/drawGridLine/DotProduct_3.outputs:out>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (214.80078, -244.22266)
                    float2 ui:nodegraph:node:size = (129, 127)
                    int ui:nodegraph:node:stackingOrder = 3581
                }

                def Shader "Multiply"
                {
                    uniform token info:id = "ND_multiply_vector3"
                    float3 inputs:in1.connect = </Root/Materials/GraphNodes/drawGridLine.inputs:isOnGridUnit>
                    float3 inputs:in2.connect = </Root/Materials/GraphNodes/drawGridLine/Step_4.outputs:out>
                    float3 outputs:out
                    float2 ui:nodegraph:node:pos = (-258.43164, -245.9605)
                    float2 ui:nodegraph:node:size = (60, 36)
                    int ui:nodegraph:node:stackingOrder = 3534
                }
            }
        }

        def Material "UnitGridLinesMaterial"
        {
            reorder nameChildren = ["isOnGridUnit", "drawGridLine", "SeparateColor3Alpha", "Mix_1", "PreviewSurface", "Position", "GridLineColor", "BaseColor", "Normal", "GridUnits", "GridLineWidth", "Convert", "Mix"]
            color4f inputs:baseColor = (0.048647866, 0.70414114, 0.8340569, 0.105563164) (
                colorSpace = "srgb_displayp3"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-503.90234, 219.8711)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 3155
                    }
                }
            )
            color4f inputs:gridLineColor = (0.048647866, 0.70414114, 0.8340569, 1) (
                colorSpace = "srgb_displayp3"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-496.92188, 154.3086)
                        float2 sizeInSubgraph = (152, 53)
                        int stackingOrderInSubgraph = 3152
                    }
                }
            )
            prepend token outputs:mtlx:surface.connect = </Root/Materials/UnitGridLinesMaterial/PreviewSurface.outputs:out>
            token outputs:realitykit:vertex
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:mtlx:surface"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (755.0508, 56.023438)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2716

            def Shader "PreviewSurface"
            {
                uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                float inputs:clearcoat
                float inputs:clearcoatRoughness
                color3f inputs:diffuseColor.connect = </Root/Materials/UnitGridLinesMaterial/SeparateColor3Alpha.outputs:color3>
                color3f inputs:emissiveColor
                float inputs:ior
                float inputs:metallic
                float3 inputs:normal
                float inputs:occlusion
                float inputs:opacity.connect = </Root/Materials/UnitGridLinesMaterial/SeparateColor3Alpha.outputs:alpha>
                float inputs:opacityThreshold
                float inputs:roughness
                token outputs:out
                float2 ui:nodegraph:node:pos = (516.16406, 0.203125)
                float2 ui:nodegraph:node:size = (159.5, 307)
                int ui:nodegraph:node:stackingOrder = 2628
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:diffuseColor", "inputs:diffuseColor", "Advanced", "inputs:diffuseColor"]
            }

            def Shader "Position"
            {
                uniform token info:id = "ND_position_vector3"
                string inputs:space = "model"
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-502.60938, -51.507812)
                float2 ui:nodegraph:node:size = (133.5, 40)
                int ui:nodegraph:node:stackingOrder = 3118
            }

            def Shader "Normal"
            {
                uniform token info:id = "ND_normal_vector3"
                string inputs:space = "model"
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-507.91336, 66.82249)
                float2 ui:nodegraph:node:size = (128.5, 40)
                int ui:nodegraph:node:stackingOrder = 2814
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out", "outputs:out"]
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_vector3_color3"
                float3 inputs:in
                color3f outputs:out
                float2 ui:nodegraph:node:pos = (221.25168, -131.51477)
                float2 ui:nodegraph:node:size = (135.5, 40)
                int ui:nodegraph:node:stackingOrder = 3128
            }

            def Shader "GridUnits"
            {
                uniform token info:id = "ND_constant_vector3"
                float3 inputs:value = (0.1, 0.1, 0.1)
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-500.51172, -203.46484)
                float2 ui:nodegraph:node:size = (154.5, 53)
                int ui:nodegraph:node:stackingOrder = 3129
            }

            def Shader "GridLineWidth"
            {
                uniform token info:id = "ND_constant_float"
                float inputs:value = 0.01
                float outputs:out
                float2 ui:nodegraph:node:pos = (-505.5625, -127.08594)
                float2 ui:nodegraph:node:size = (173.5, 53)
                int ui:nodegraph:node:stackingOrder = 2771
            }

            def "isOnGridUnit" (
                active = true
                instanceable = true
                references = </Root/Materials/GraphNodes/isOnGridUnit>
            )
            {
                float3 inputs:gridUnits.connect = </Root/Materials/UnitGridLinesMaterial/GridUnits.outputs:out>
                float inputs:lineWidth.connect = </Root/Materials/UnitGridLinesMaterial/GridLineWidth.outputs:out>
                float3 inputs:position.connect = </Root/Materials/UnitGridLinesMaterial/Position.outputs:out>
                float2 ui:nodegraph:node:pos = (-247.43652, -117.3548)
                float2 ui:nodegraph:node:size = (130, 217)
                int ui:nodegraph:node:stackingOrder = 3138
            }

            def "drawGridLine" (
                active = true
                instanceable = true
                references = </Root/Materials/GraphNodes/drawGridLine>
            )
            {
                float3 inputs:isOnGridUnit.connect = </Root/Materials/UnitGridLinesMaterial/isOnGridUnit.outputs:isOnGridLine>
                float3 inputs:objectNormal.connect = </Root/Materials/UnitGridLinesMaterial/Normal.outputs:out>
                float2 ui:nodegraph:node:pos = (-65.608826, 37.056717)
                float2 ui:nodegraph:node:size = (133, 127)
                int ui:nodegraph:node:stackingOrder = 3162
            }

            def Shader "Mix_1"
            {
                uniform token info:id = "ND_mix_color4"
                color4f inputs:bg.connect = </Root/Materials/UnitGridLinesMaterial.inputs:baseColor>
                color4f inputs:fg.connect = </Root/Materials/UnitGridLinesMaterial.inputs:gridLineColor>
                prepend float inputs:mix.connect = </Root/Materials/UnitGridLinesMaterial/drawGridLine.outputs:drawGridLine>
                color4f outputs:out
                float2 ui:nodegraph:node:pos = (-205.31699, 170.26303)
                float2 ui:nodegraph:node:size = (109, 145)
                int ui:nodegraph:node:stackingOrder = 3158
            }

            def "SeparateColor3Alpha" (
                active = true
                instanceable = true
                references = </Root/Materials/GraphNodes/SeparateColor3Alpha>
            )
            {
                color4f inputs:Color4 (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (75.75, 81.5)
                            float2 sizeInSubgraph = (133, 53)
                            int stackingOrderInSubgraph = 1421
                        }
                    }
                )
                color4f inputs:Color4.connect = </Root/Materials/UnitGridLinesMaterial/Mix_1.outputs:out>
                float2 ui:nodegraph:node:pos = (234.17697, 68.16116)
                float2 ui:nodegraph:node:size = (183, 127)
                int ui:nodegraph:node:stackingOrder = 3160
                float2 ui:nodegraph:realitykit:subgraphOutputs:size = (164, 99)
            }
        }
    }

    def Xform "Palette" (
        active = true
    )
    {
        reorder nameChildren = ["globeMaterialHolder", "gridMaterialHolder", "lightGridMaterialHolder"]
        def Sphere "globeMaterialHolder" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Materials/GlobeMaterial> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "gridMaterialHolder" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Materials/GridMaterial> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0.4, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "lightGridMaterialHolder" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/Materials/LightGridMaterial> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double radius = 0.1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0.8, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Material "UnitGridLine"
    {
        reorder nameChildren = ["PreviewSurface", "SeparateColor3Alpha_1", "drawGridLine", "Texcoord", "Separate2", "Combine3", "Normal", "Step", "Oneminus", "Multiply", "DotProduct", "Absval", "Step_1", "Absval_1", "Convert", "Position", "isOnGridUnit", "Range", "Mix", "Separate3", "Object_position"]
        color4f inputs:BaseColor = (0.048647866, 0.70414114, 0.8340569, 0.10087802) (
            colorSpace = "srgb_displayp3"
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-2015.0289, 48.797184)
                    float2 sizeInSubgraph = (133, 53)
                    int stackingOrderInSubgraph = 2708
                }
            }
        )
        float3 inputs:GridUnits = (0.1, 0.1, 0.1) (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-2016.5061, -257.6287)
                    float2 sizeInSubgraph = (139, 53)
                    int stackingOrderInSubgraph = 2706
                }
            }
        )
        color4f inputs:LineColor = (0.048647866, 0.70414114, 0.8340569, 1) (
            colorSpace = "srgb_displayp3"
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-2015.1628, -44.937508)
                    float2 sizeInSubgraph = (133, 53)
                    int stackingOrderInSubgraph = 2707
                }
            }
        )
        float inputs:LineWidth = 0.01 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-2019.607, -148.67897)
                    float2 sizeInSubgraph = (130.5, 53)
                    int stackingOrderInSubgraph = 2802
                }
            }
        )
        prepend token outputs:mtlx:surface.connect = </Root/UnitGridLine/PreviewSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (-111.3929, -198.95395)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 2521

        def Shader "PreviewSurface"
        {
            uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
            float inputs:clearcoat
            float inputs:clearcoatRoughness
            color3f inputs:diffuseColor.connect = </Root/UnitGridLine/SeparateColor3Alpha_1.outputs:color3>
            color3f inputs:emissiveColor
            float inputs:ior
            float inputs:metallic
            float3 inputs:normal
            float inputs:opacity.connect = </Root/UnitGridLine/SeparateColor3Alpha_1.outputs:alpha>
            float inputs:roughness
            token outputs:out
            float2 ui:nodegraph:node:pos = (-442.03986, -234.09238)
            float2 ui:nodegraph:node:size = (159.5, 307)
            int ui:nodegraph:node:stackingOrder = 2750
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["Advanced"]
        }

        def Shader "Separate3"
        {
            uniform token info:id = "ND_separate3_vector3"
            float3 inputs:in.connect = </Root/UnitGridLine/Position.outputs:out>
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (-2063.9468, -400.06052)
            float2 ui:nodegraph:node:size = (115.5, 145)
            int ui:nodegraph:node:stackingOrder = 3159
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
        }

        def Shader "Object_position"
        {
            uniform token info:id = "ND_combine3_vector3"
            prepend float inputs:in1.connect = </Root/UnitGridLine/Separate3.outputs:outx>
            prepend float inputs:in2.connect = </Root/UnitGridLine/Separate3.outputs:outy>
            float inputs:in3.connect = </Root/UnitGridLine/Separate3.outputs:outz>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-1884.4613, -362.9753)
            float2 ui:nodegraph:node:size = (180, 54)
            int ui:nodegraph:node:stackingOrder = 3159
        }

        def Shader "Position"
        {
            uniform token info:id = "ND_position_vector3"
            string inputs:space = "model"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-2206.6177, -522.4719)
            float2 ui:nodegraph:node:size = (133.5, 40)
            int ui:nodegraph:node:stackingOrder = 2705
        }

        def NodeGraph "isOnGridUnit"
        {
            reorder nameChildren = ["Fractional", "Add_1", "isOnXYZ", "Absval", "half_line", "Oneminus_1", "Convert", "isNotZero", "Range", "Step", "Add_2", "Add_3", "Oneminus", "Multiply", "Modulo"]
            float3 inputs:gridUnits = (0.1, 0.1, 0.1) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (21.1875, -126.078125)
                        float2 sizeInSubgraph = (139, 53)
                        int stackingOrderInSubgraph = 3143
                    }
                }
            )
            float3 inputs:gridUnits.connect = </Root/UnitGridLine.inputs:GridUnits>
            float inputs:lineWidth = 0.01 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (18.117188, 36.359375)
                        float2 sizeInSubgraph = (126.5, 53)
                        int stackingOrderInSubgraph = 3013
                    }
                }
            )
            float inputs:lineWidth.connect = </Root/UnitGridLine.inputs:LineWidth>
            float3 inputs:normal = (0, 0, 0) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (28.707031, 162.77734)
                        float2 sizeInSubgraph = (139, 53)
                        int stackingOrderInSubgraph = 3085
                    }
                }
            )
            float3 inputs:normal.connect = None
            float3 inputs:position = (0, 0, 0) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (20.367188, -246.52344)
                        float2 sizeInSubgraph = (139, 53)
                        int stackingOrderInSubgraph = 2593
                    }
                }
            )
            float3 inputs:position.connect = </Root/UnitGridLine/Position.outputs:out>
            float outputs:isOnAnyGridLine (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 2459
                    }
                }
            )
            float outputs:isOnAnyGridLine.connect = </Root/UnitGridLine/isOnGridUnit/Step.outputs:out>
            float3 outputs:isOnGridLine.connect = </Root/UnitGridLine/isOnGridUnit/Oneminus.outputs:out>
            float outputs:isOnX (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 2474
                    }
                }
            )
            float outputs:isOnX.connect = </Root/UnitGridLine/isOnGridUnit/isOnXYZ.outputs:outx>
            float outputs:isOnY (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 2474
                    }
                }
            )
            float outputs:isOnY.connect = </Root/UnitGridLine/isOnGridUnit/isOnXYZ.outputs:outy>
            float outputs:isOnZ (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 2474
                    }
                }
            )
            float outputs:isOnZ.connect = </Root/UnitGridLine/isOnGridUnit/isOnXYZ.outputs:outz>
            float2 ui:nodegraph:node:pos = (-1339.6937, -511.52863)
            float2 ui:nodegraph:node:size = (132, 235)
            int ui:nodegraph:node:stackingOrder = 3114
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:isOnGridLine", "outputs:Min_2_out", "outputs:isOnGridLine_1", "outputs:Combine3_out", "outputs:isOnGridLine", "outputs:Combine3_out", "outputs:isOnGridLine", "outputs:isOnGridLine", "outputs:isOnZ"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1749.2852, -118.30078)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (221.5, 153)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 3066

            def Shader "Fractional"
            {
                uniform token info:id = "ND_realitykit_fractional_vector3"
                float3 inputs:in.connect = </Root/UnitGridLine/isOnGridUnit/Modulo.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (440.43948, -246.068)
                float2 ui:nodegraph:node:size = (154.5, 109)
                int ui:nodegraph:node:stackingOrder = 3145
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Add_1"
            {
                uniform token info:id = "ND_add_vector3"
                float3 inputs:in1.connect = </Root/UnitGridLine/isOnGridUnit.inputs:position>
                float3 inputs:in2.connect = </Root/UnitGridLine/isOnGridUnit/half_line.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (191.32812, -237.08984)
                float2 ui:nodegraph:node:size = (61.5, 36.5)
                int ui:nodegraph:node:stackingOrder = 2632
            }

            def Shader "Modulo"
            {
                uniform token info:id = "ND_modulo_vector3"
                float3 inputs:in1.connect = </Root/UnitGridLine/isOnGridUnit/Add_1.outputs:out>
                float3 inputs:in2.connect = </Root/UnitGridLine/isOnGridUnit.inputs:gridUnits>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (287.91803, -230.76823)
                float2 ui:nodegraph:node:size = (63, 38.5)
                int ui:nodegraph:node:stackingOrder = 3147
            }

            def Shader "isOnXYZ"
            {
                uniform token info:id = "ND_separate3_vector3"
                float3 inputs:in.connect = </Root/UnitGridLine/isOnGridUnit/Oneminus.outputs:out>
                float outputs:outx
                float outputs:outy
                float outputs:outz
                float2 ui:nodegraph:node:pos = (1179.2053, -60.22525)
                float2 ui:nodegraph:node:size = (105.5, 145)
                int ui:nodegraph:node:stackingOrder = 3169
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
            }

            def Shader "half_line"
            {
                uniform token info:id = "ND_multiply_vector3FA"
                float3 inputs:in1 = (0.5, 0.5, 0.5)
                float inputs:in2.connect = </Root/UnitGridLine/isOnGridUnit.inputs:lineWidth>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (127.55859, -41.28125)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 3011
            }

            def Shader "Oneminus_1"
            {
                uniform token info:id = "ND_realitykit_oneminus_vector3"
                float3 inputs:in.connect = </Root/UnitGridLine/isOnGridUnit/isNotZero.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (718.21136, 191.94145)
                float2 ui:nodegraph:node:size = (158, 109)
                int ui:nodegraph:node:stackingOrder = 3152
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_vector3"
                prepend float inputs:in.connect = </Root/UnitGridLine/isOnGridUnit.inputs:lineWidth>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (368.77362, 31.545897)
                float2 ui:nodegraph:node:size = (135.5, 40)
                int ui:nodegraph:node:stackingOrder = 3149
            }

            def Shader "Range"
            {
                uniform token info:id = "ND_range_vector3"
                bool inputs:doclamp = 1
                float3 inputs:gamma
                float3 inputs:in.connect = </Root/UnitGridLine/isOnGridUnit/Fractional.outputs:out>
                float3 inputs:inhigh.connect = </Root/UnitGridLine/isOnGridUnit/Convert.outputs:out>
                float3 inputs:inlow.connect = None
                float3 inputs:outhigh = (1, 1, 1)
                float3 inputs:outlow = (0, 0, 0)
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (671.4384, -290.68375)
                float2 ui:nodegraph:node:size = (98, 217)
                int ui:nodegraph:node:stackingOrder = 3160
            }

            def Shader "Step"
            {
                uniform token info:id = "ND_realitykit_step_float"
                float inputs:edge = 1
                float inputs:in.connect = </Root/UnitGridLine/isOnGridUnit/Add_3.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1460.8828, -323.1328)
                float2 ui:nodegraph:node:size = (129, 127)
                int ui:nodegraph:node:stackingOrder = 3048
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:edge"]
            }

            def Shader "Add_2"
            {
                uniform token info:id = "ND_add_float"
                float inputs:in1.connect = </Root/UnitGridLine/isOnGridUnit/isOnXYZ.outputs:outx>
                float inputs:in2.connect = </Root/UnitGridLine/isOnGridUnit/isOnXYZ.outputs:outy>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1229.6289, -363.80078)
                float2 ui:nodegraph:node:size = (61.5, 36.5)
                int ui:nodegraph:node:stackingOrder = 3061
            }

            def Shader "Add_3"
            {
                uniform token info:id = "ND_add_float"
                float inputs:in1.connect = </Root/UnitGridLine/isOnGridUnit/Add_2.outputs:out>
                float inputs:in2.connect = None
                float outputs:out
                float2 ui:nodegraph:node:pos = (1297.8594, -313.71094)
                float2 ui:nodegraph:node:size = (61.5, 36.5)
                int ui:nodegraph:node:stackingOrder = 3064
            }

            def Shader "Oneminus"
            {
                uniform token info:id = "ND_realitykit_oneminus_vector3"
                float3 inputs:in.connect = </Root/UnitGridLine/isOnGridUnit/Range.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (830.97784, -213.45393)
                float2 ui:nodegraph:node:size = (158, 109)
                int ui:nodegraph:node:stackingOrder = 3162
            }

            def Shader "Multiply"
            {
                uniform token info:id = "ND_multiply_vector3"
                float3 inputs:in1.connect = </Root/UnitGridLine/isOnGridUnit/Oneminus.outputs:out>
                float3 inputs:in2.connect = </Root/UnitGridLine/isOnGridUnit/Oneminus_1.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (1043.7504, 13.998095)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 3159
            }

            def Shader "Absval"
            {
                uniform token info:id = "ND_absval_vector3"
                float3 inputs:in.connect = </Root/UnitGridLine/isOnGridUnit.inputs:normal>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (223.33984, 165.69922)
                float2 ui:nodegraph:node:size = (121.5, 53)
                int ui:nodegraph:node:stackingOrder = 3098
            }

            def Shader "isNotZero"
            {
                uniform token info:id = "ND_realitykit_step_vector3"
                float3 inputs:edge = (0.001, 0.001, 0.001)
                float3 inputs:in.connect = </Root/UnitGridLine/isOnGridUnit/Absval.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (469.3672, 160.88672)
                float2 ui:nodegraph:node:size = (129, 127)
                int ui:nodegraph:node:stackingOrder = 3154
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:edge", "inputs:edge"]
            }
        }

        def Shader "Mix"
        {
            uniform token info:id = "ND_mix_color4"
            color4f inputs:bg.connect = </Root/UnitGridLine.inputs:BaseColor>
            color4f inputs:fg.connect = </Root/UnitGridLine.inputs:LineColor>
            float inputs:mix = 1
            float inputs:mix.connect = </Root/UnitGridLine/Step_1.outputs:out>
            color4f outputs:out
            float2 ui:nodegraph:node:pos = (-1024.9901, -271.7296)
            float2 ui:nodegraph:node:size = (109, 145)
            int ui:nodegraph:node:stackingOrder = 2735
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
        }

        def "SeparateColor3Alpha_1" (
            active = true
            instanceable = true
            references = </Root/Materials/GraphNodes/SeparateColor3Alpha>
        )
        {
            color4f inputs:Color4 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (75.75, 81.5)
                        float2 sizeInSubgraph = (133, 53)
                        int stackingOrderInSubgraph = 1421
                    }
                }
            )
            color4f inputs:Color4.connect = </Root/UnitGridLine/Mix.outputs:out>
            float2 ui:nodegraph:node:pos = (-755.1587, -249.10733)
            float2 ui:nodegraph:node:size = (195.5, 127)
            int ui:nodegraph:node:stackingOrder = 2737
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (161.5, 99)
        }

        def Shader "Texcoord"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-2187.6401, -640.3387)
            float2 ui:nodegraph:node:size = (180.5, 53)
            int ui:nodegraph:node:stackingOrder = 2633
        }

        def Shader "Separate2"
        {
            uniform token info:id = "ND_separate2_vector2"
            float2 inputs:in.connect = </Root/UnitGridLine/Texcoord.outputs:out>
            float outputs:outx
            float outputs:outy
            float2 ui:nodegraph:node:pos = (-2006.2831, -643.8399)
            float2 ui:nodegraph:node:size = (115, 127)
            int ui:nodegraph:node:stackingOrder = 2633
        }

        def Shader "Combine3"
        {
            uniform token info:id = "ND_combine3_vector3"
            prepend float inputs:in1.connect = </Root/UnitGridLine/Separate2.outputs:outx>
            float inputs:in2.connect = </Root/UnitGridLine/Separate2.outputs:outy>
            float inputs:in3 = 1000
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-1784.548, -614.5801)
            float2 ui:nodegraph:node:size = (145, 54)
            int ui:nodegraph:node:stackingOrder = 2633
        }

        def Shader "Normal"
        {
            uniform token info:id = "ND_normal_vector3"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-1322.6493, -692.619)
            float2 ui:nodegraph:node:size = (128.5, 40)
            int ui:nodegraph:node:stackingOrder = 3114
        }

        def Shader "Step"
        {
            uniform token info:id = "ND_realitykit_step_vector3"
            float3 inputs:edge = (0.001, 0.001, 0.001)
            float3 inputs:in.connect = </Root/UnitGridLine/Absval_1.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-983.625, -696.22266)
            float2 ui:nodegraph:node:size = (129, 127)
            int ui:nodegraph:node:stackingOrder = 3114
        }

        def Shader "Oneminus"
        {
            uniform token info:id = "ND_realitykit_oneminus_vector3"
            float3 inputs:in.connect = </Root/UnitGridLine/Range.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-777.7324, -678.8692)
            float2 ui:nodegraph:node:size = (158, 109)
            int ui:nodegraph:node:stackingOrder = 3114
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector3"
            float3 inputs:in1.connect = </Root/UnitGridLine/isOnGridUnit.outputs:isOnGridLine>
            float3 inputs:in2.connect = </Root/UnitGridLine/Oneminus.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-1145.556, -567.7332)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 3114
        }

        def Shader "DotProduct"
        {
            uniform token info:id = "ND_dotproduct_vector3"
            float3 inputs:in1.connect = </Root/UnitGridLine/Oneminus.outputs:out>
            float3 inputs:in2 = (1, 1, 1)
            float3 inputs:in2.connect = </Root/UnitGridLine/Multiply.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-992.6211, -504.77734)
            float2 ui:nodegraph:node:size = (153.5, 53)
            int ui:nodegraph:node:stackingOrder = 3114
        }

        def Shader "Absval"
        {
            uniform token info:id = "ND_absval_float"
            float inputs:in.connect = </Root/UnitGridLine/DotProduct.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-813.84375, -506.76562)
            float2 ui:nodegraph:node:size = (121.5, 53)
            int ui:nodegraph:node:stackingOrder = 3114
        }

        def Shader "Step_1"
        {
            uniform token info:id = "ND_realitykit_step_float"
            float inputs:edge = 0.001
            float inputs:in.connect = </Root/UnitGridLine/Absval.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-638.97656, -510.32812)
            float2 ui:nodegraph:node:size = (129, 127)
            int ui:nodegraph:node:stackingOrder = 3114
        }

        def Shader "Absval_1"
        {
            uniform token info:id = "ND_absval_vector3"
            float3 inputs:in.connect = </Root/UnitGridLine/Normal.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-1159.6094, -692.1367)
            float2 ui:nodegraph:node:size = (134, 53)
            int ui:nodegraph:node:stackingOrder = 3114
        }

        def Shader "Convert"
        {
            uniform token info:id = "ND_convert_vector3_color3"
            float3 inputs:in.connect = </Root/UnitGridLine/Oneminus.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-422.4704, -680.5478)
            float2 ui:nodegraph:node:size = (135.5, 40)
            int ui:nodegraph:node:stackingOrder = 3114
        }

        def Shader "Range"
        {
            uniform token info:id = "ND_range_vector3"
            bool inputs:doclamp
            float3 inputs:in.connect = </Root/UnitGridLine/Absval_1.outputs:out>
            float3 inputs:inhigh = (1, 1, 1)
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-990.8933, -891.7608)
            float2 ui:nodegraph:node:size = (98, 217)
            int ui:nodegraph:node:stackingOrder = 3114
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:inhigh"]
        }

        def NodeGraph "isOnGridUnit_1"
        {
            reorder nameChildren = ["Fractional", "Add_1", "isOnXYZ", "Absval", "half_line", "Oneminus_1", "Convert", "isNotZero", "Range", "Step", "Add_2", "Add_3", "Oneminus", "Multiply", "Modulo"]
            float3 inputs:gridUnits = (0.1, 0.1, 0.1) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (21.1875, -126.078125)
                        float2 sizeInSubgraph = (139, 53)
                        int stackingOrderInSubgraph = 3143
                    }
                }
            )
            float3 inputs:gridUnits.connect = </Root/UnitGridLine.inputs:GridUnits>
            float inputs:lineWidth = 0.01 (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (18.117188, 36.359375)
                        float2 sizeInSubgraph = (126.5, 53)
                        int stackingOrderInSubgraph = 3013
                    }
                }
            )
            float inputs:lineWidth.connect = </Root/UnitGridLine.inputs:LineWidth>
            float3 inputs:normal = (0, 0, 0) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (28.707031, 162.77734)
                        float2 sizeInSubgraph = (139, 53)
                        int stackingOrderInSubgraph = 3085
                    }
                }
            )
            float3 inputs:normal.connect = None
            float3 inputs:position = (0, 0, 0) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (20.367188, -246.52344)
                        float2 sizeInSubgraph = (139, 53)
                        int stackingOrderInSubgraph = 2593
                    }
                }
            )
            float3 inputs:position.connect = </Root/UnitGridLine/Position.outputs:out>
            float outputs:isOnAnyGridLine (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 2459
                    }
                }
            )
            float outputs:isOnAnyGridLine.connect = </Root/UnitGridLine/isOnGridUnit_1/Step.outputs:out>
            float3 outputs:isOnGridLine.connect = </Root/UnitGridLine/isOnGridUnit_1/Oneminus.outputs:out>
            float outputs:isOnX (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 2474
                    }
                }
            )
            float outputs:isOnX.connect = </Root/UnitGridLine/isOnGridUnit_1/isOnXYZ.outputs:outx>
            float outputs:isOnY (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 2474
                    }
                }
            )
            float outputs:isOnY.connect = </Root/UnitGridLine/isOnGridUnit_1/isOnXYZ.outputs:outy>
            float outputs:isOnZ (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 2474
                    }
                }
            )
            float outputs:isOnZ.connect = </Root/UnitGridLine/isOnGridUnit_1/isOnXYZ.outputs:outz>
            float2 ui:nodegraph:node:pos = (-1319.6937, -491.52863)
            float2 ui:nodegraph:node:size = (132, 235)
            int ui:nodegraph:node:stackingOrder = 3115
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:isOnGridLine", "outputs:Min_2_out", "outputs:isOnGridLine_1", "outputs:Combine3_out", "outputs:isOnGridLine", "outputs:Combine3_out", "outputs:isOnGridLine", "outputs:isOnGridLine", "outputs:isOnZ"]
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (1749.2852, -118.30078)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (221.97618, 153)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 3066

            def Shader "Fractional"
            {
                uniform token info:id = "ND_realitykit_fractional_vector3"
                float3 inputs:in.connect = </Root/UnitGridLine/isOnGridUnit_1/Modulo.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (440.43948, -246.068)
                float2 ui:nodegraph:node:size = (154.5, 109)
                int ui:nodegraph:node:stackingOrder = 3145
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["outputs:out"]
            }

            def Shader "Add_1"
            {
                uniform token info:id = "ND_add_vector3"
                float3 inputs:in1.connect = </Root/UnitGridLine/isOnGridUnit_1.inputs:position>
                float3 inputs:in2.connect = </Root/UnitGridLine/isOnGridUnit_1/half_line.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (191.32812, -237.08984)
                float2 ui:nodegraph:node:size = (61.5, 36.5)
                int ui:nodegraph:node:stackingOrder = 2632
            }

            def Shader "Modulo"
            {
                uniform token info:id = "ND_modulo_vector3"
                float3 inputs:in1.connect = </Root/UnitGridLine/isOnGridUnit_1/Add_1.outputs:out>
                float3 inputs:in2.connect = </Root/UnitGridLine/isOnGridUnit_1.inputs:gridUnits>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (287.91803, -230.76823)
                float2 ui:nodegraph:node:size = (63, 38.5)
                int ui:nodegraph:node:stackingOrder = 3147
            }

            def Shader "isOnXYZ"
            {
                uniform token info:id = "ND_separate3_vector3"
                float3 inputs:in.connect = </Root/UnitGridLine/isOnGridUnit_1/Oneminus.outputs:out>
                float outputs:outx
                float outputs:outy
                float outputs:outz
                float2 ui:nodegraph:node:pos = (1179.2053, -60.22525)
                float2 ui:nodegraph:node:size = (105.5, 145)
                int ui:nodegraph:node:stackingOrder = 3169
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:in"]
            }

            def Shader "half_line"
            {
                uniform token info:id = "ND_multiply_vector3FA"
                float3 inputs:in1 = (0.5, 0.5, 0.5)
                float inputs:in2.connect = </Root/UnitGridLine/isOnGridUnit_1.inputs:lineWidth>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (127.55859, -41.28125)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 3011
            }

            def Shader "Oneminus_1"
            {
                uniform token info:id = "ND_realitykit_oneminus_vector3"
                float3 inputs:in.connect = </Root/UnitGridLine/isOnGridUnit_1/isNotZero.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (718.21136, 191.94145)
                float2 ui:nodegraph:node:size = (158, 109)
                int ui:nodegraph:node:stackingOrder = 3152
            }

            def Shader "Convert"
            {
                uniform token info:id = "ND_convert_float_vector3"
                float inputs:in.connect = </Root/UnitGridLine/isOnGridUnit_1.inputs:lineWidth>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (368.77362, 31.545897)
                float2 ui:nodegraph:node:size = (135.5, 40)
                int ui:nodegraph:node:stackingOrder = 3149
            }

            def Shader "Range"
            {
                uniform token info:id = "ND_range_vector3"
                bool inputs:doclamp = 1
                float3 inputs:gamma
                float3 inputs:in.connect = </Root/UnitGridLine/isOnGridUnit_1/Fractional.outputs:out>
                float3 inputs:inhigh.connect = </Root/UnitGridLine/isOnGridUnit_1/Convert.outputs:out>
                float3 inputs:inlow.connect = None
                float3 inputs:outhigh = (1, 1, 1)
                float3 inputs:outlow = (0, 0, 0)
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (671.4384, -290.68375)
                float2 ui:nodegraph:node:size = (98, 217)
                int ui:nodegraph:node:stackingOrder = 3160
            }

            def Shader "Step"
            {
                uniform token info:id = "ND_realitykit_step_float"
                float inputs:edge = 1
                float inputs:in.connect = </Root/UnitGridLine/isOnGridUnit_1/Add_3.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1460.8828, -323.1328)
                float2 ui:nodegraph:node:size = (129, 127)
                int ui:nodegraph:node:stackingOrder = 3048
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:edge"]
            }

            def Shader "Add_2"
            {
                uniform token info:id = "ND_add_float"
                float inputs:in1.connect = </Root/UnitGridLine/isOnGridUnit_1/isOnXYZ.outputs:outx>
                float inputs:in2.connect = </Root/UnitGridLine/isOnGridUnit_1/isOnXYZ.outputs:outy>
                float outputs:out
                float2 ui:nodegraph:node:pos = (1229.6289, -363.80078)
                float2 ui:nodegraph:node:size = (61.5, 36.5)
                int ui:nodegraph:node:stackingOrder = 3061
            }

            def Shader "Add_3"
            {
                uniform token info:id = "ND_add_float"
                float inputs:in1.connect = </Root/UnitGridLine/isOnGridUnit_1/Add_2.outputs:out>
                float inputs:in2.connect = None
                float outputs:out
                float2 ui:nodegraph:node:pos = (1297.8594, -313.71094)
                float2 ui:nodegraph:node:size = (61.5, 36.5)
                int ui:nodegraph:node:stackingOrder = 3064
            }

            def Shader "Oneminus"
            {
                uniform token info:id = "ND_realitykit_oneminus_vector3"
                float3 inputs:in.connect = </Root/UnitGridLine/isOnGridUnit_1/Range.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (830.97784, -213.45393)
                float2 ui:nodegraph:node:size = (158, 109)
                int ui:nodegraph:node:stackingOrder = 3162
            }

            def Shader "Multiply"
            {
                uniform token info:id = "ND_multiply_vector3"
                float3 inputs:in1.connect = </Root/UnitGridLine/isOnGridUnit_1/Oneminus.outputs:out>
                float3 inputs:in2.connect = </Root/UnitGridLine/isOnGridUnit_1/Oneminus_1.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (1043.7504, 13.998095)
                float2 ui:nodegraph:node:size = (60, 36)
                int ui:nodegraph:node:stackingOrder = 3159
            }

            def Shader "Absval"
            {
                uniform token info:id = "ND_absval_vector3"
                float3 inputs:in.connect = </Root/UnitGridLine/isOnGridUnit_1.inputs:normal>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (223.33984, 165.69922)
                float2 ui:nodegraph:node:size = (121.5, 53)
                int ui:nodegraph:node:stackingOrder = 3098
            }

            def Shader "isNotZero"
            {
                uniform token info:id = "ND_realitykit_step_vector3"
                float3 inputs:edge = (0.001, 0.001, 0.001)
                float3 inputs:in.connect = </Root/UnitGridLine/isOnGridUnit_1/Absval.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (469.3672, 160.88672)
                float2 ui:nodegraph:node:size = (129, 127)
                int ui:nodegraph:node:stackingOrder = 3154
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:edge", "inputs:edge"]
            }
        }

        def NodeGraph "drawGridLine" (
            active = true
        )
        {
            reorder nameChildren = ["DotProduct", "Range", "Absval_1", "Step_1", "Oneminus", "Multiply", "Absval", "Step", "Convert", "Range_1", "Absval_2", "Step_2", "DotProduct_1", "Multiply_1", "Oneminus_1", "Absval_3", "Convert_1", "Step_3", "Absval_5", "Step_4", "Oneminus_2", "Convert_2", "Step_5", "Range_2", "DotProduct_2", "Multiply_2", "Absval_4", "absNormal"]
            float3 inputs:isOnGridUnit = (0, 0, 0) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-461.29688, -203.3086)
                        float2 sizeInSubgraph = (148, 53)
                        int stackingOrderInSubgraph = 3149
                    }
                }
            )
            float3 inputs:objectNormal = (0, 0, 0) (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-462.73047, 8.792969)
                        float2 sizeInSubgraph = (152, 53)
                        int stackingOrderInSubgraph = 2
                    }
                }
            )
            float outputs:drawGridLine (
                customData = {
                    dictionary realitykit = {
                        int stackingOrderInSubgraph = 3308
                    }
                }
            )
            float outputs:drawGridLine.connect = </Root/UnitGridLine/drawGridLine/Step_6.outputs:out>
            float2 ui:nodegraph:node:size = (135, 127)
            float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (234.64844, -229.35938)
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (167, 81)
            int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 3310

            def Shader "Step_4"
            {
                uniform token info:id = "ND_realitykit_step_vector3"
                float3 inputs:edge = (0.001, 0.001, 0.001)
                float3 inputs:in.connect = </Root/UnitGridLine/drawGridLine/Oneminus_3.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (101.6344, 30.754784)
                float2 ui:nodegraph:node:size = (129, 127)
                int ui:nodegraph:node:stackingOrder = 3304
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:edge"]
            }

            def Shader "absNormal"
            {
                uniform token info:id = "ND_absval_vector3"
                float3 inputs:in.connect = </Root/UnitGridLine/drawGridLine.inputs:objectNormal>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-292.85547, 10.4453125)
                float2 ui:nodegraph:node:size = (147.5, 53)
                int ui:nodegraph:node:stackingOrder = 3224
            }

            def Shader "Oneminus_3"
            {
                uniform token info:id = "ND_realitykit_oneminus_vector3"
                float3 inputs:in.connect = </Root/UnitGridLine/drawGridLine/absNormal.outputs:out>
                float3 outputs:out
                float2 ui:nodegraph:node:pos = (-111.18359, -1.984375)
                float2 ui:nodegraph:node:size = (158, 109)
                int ui:nodegraph:node:stackingOrder = 3302
            }

            def Shader "DotProduct_3"
            {
                uniform token info:id = "ND_dotproduct_vector3"
                float3 inputs:in1.connect = </Root/UnitGridLine/drawGridLine.inputs:isOnGridUnit>
                float3 inputs:in2.connect = </Root/UnitGridLine/drawGridLine/Step_4.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (-185.9336, -245.85938)
                float2 ui:nodegraph:node:size = (169, 53)
                int ui:nodegraph:node:stackingOrder = 3307
            }

            def Shader "Step_6"
            {
                uniform token info:id = "ND_realitykit_step_float"
                float inputs:edge
                float inputs:in.connect = </Root/UnitGridLine/drawGridLine/DotProduct_3.outputs:out>
                float outputs:out
                float2 ui:nodegraph:node:pos = (14.1484375, -248.35547)
                float2 ui:nodegraph:node:size = (129, 127)
                int ui:nodegraph:node:stackingOrder = 3308
            }
        }
    }
}


#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 1.0 (409.100.15)"
    }
    defaultPrim = "root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "root"
{
    reorder nameChildren = ["gridRoot", "PlasticBlock", "Materials"]
    def Xform "gridRoot" (
        active = true
    )
    {
        reorder nameChildren = ["GroundGrid", "BackGrid", "RightGrid", "origin"]
        def Cube "GroundGrid" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (1.5707961, 1.7763568e-15, 4.636418e-8)
            }
            references = None
        )
        {
            rel material:binding = </root/Materials/GridMaterials/Materials/LightGridMaterial> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 1
            quatf xformOp:orient = (0.7071068, 0.7071067, 1.6392212e-8, 1.6392214e-8)
            float3 xformOp:scale = (1, 1, 0.001)
            float3 xformOp:translate = (0, -0.5, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cube "BackGrid" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            references = None
        )
        {
            rel material:binding = </root/Materials/GridMaterials/Materials/LightGridMaterial> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 0.001)
            float3 xformOp:translate = (0, 0, -0.5)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cube "RightGrid" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (0, 1.5707963, 0)
            }
            references = None
        )
        {
            rel material:binding = </root/Materials/GridMaterials/Materials/LightGridMaterial> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 1
            quatf xformOp:orient = (0.70710677, 0, 0.70710677, 0)
            float3 xformOp:scale = (1, 1, 0.01)
            float3 xformOp:translate = (0.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Xform "origin" (
            active = true
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-0.25, -0.45, 0.15)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Cube "Block" (
                active = false
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </root/Materials/BlackABSPlastic> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 0.1
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }
    }

    def Xform "Materials" (
        active = true
    )
    {
        def "GridMaterials" (
            active = true
            references = @GridMaterials.usda@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
        }

        def "BlackABSPlastic" (
            active = true
            references = @BlackABSPlastic.usdz@
        )
        {
            color3f inputs:Basecolor_Tint = (0, 0.5898009, 1) (
                colorSpace = "srgb_texture"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-45.51249, 49.172512)
                        float2 sizeInSubgraph = (160.5, 53)
                        int stackingOrderInSubgraph = 2293
                    }
                }
            )
            float2 inputs:UV_Scale (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-725.2588, 351.55255)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 2280
                    }
                }
            )
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            over "Mix"
            {
                float2 ui:nodegraph:node:size = (109, 145)
            }

            over "Swizzle_1"
            {
                float2 ui:nodegraph:node:size = (145.5, 53)
            }

            over "Swizzle"
            {
                float2 ui:nodegraph:node:size = (133.5, 40)
            }

            over "Multiply_1"
            {
                float2 ui:nodegraph:node:size = (60, 36)
            }

            over "Dot"
            {
                float2 ui:nodegraph:node:size = (44, 18)
            }

            over "multiply"
            {
                float2 ui:nodegraph:node:size = (60, 36)
            }

            over "add"
            {
                float2 ui:nodegraph:node:size = (61.5, 36.5)
            }

            over "PreviewSurface"
            {
                float2 ui:nodegraph:node:size = (148.5, 199)
            }

            over "BaseColor"
            {
                float2 ui:nodegraph:node:size = (158.5, 235)
            }

            over "Roughness"
            {
                float2 ui:nodegraph:node:size = (158.5, 235)
            }

            over "Metallic"
            {
                float2 ui:nodegraph:node:size = (158.5, 235)
            }

            over "Normal"
            {
                float2 ui:nodegraph:node:size = (158.5, 235)
            }
        }
    }

    def Cube "PlasticBlock" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </root/Materials/BlackABSPlastic> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.25, -0.45, 0.15)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}


#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 1.0 (409.100.15)"
    }
    defaultPrim = "root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "root"
{
    reorder nameChildren = ["gridRoot", "PlasticBlock", "Sphere", "Materials"]
    def Xform "gridRoot" (
        active = true
    )
    {
        reorder nameChildren = ["GroundGrid", "BackGrid", "RightGrid", "origin"]
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "GroundGrid" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (1.5707961, 1.7763568e-15, 4.636418e-8)
            }
            references = None
        )
        {
            rel material:binding = </root/Materials/GridMaterials/Materials/LightGridMaterial> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 1
            quatf xformOp:orient = (0.7071068, 0.7071067, 1.6392212e-8, 1.6392214e-8)
            float3 xformOp:scale = (1, 1, 0.001)
            float3 xformOp:translate = (0, -0.5, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cube "BackGrid" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            references = None
        )
        {
            rel material:binding = </root/Materials/GridMaterials/Materials/LightGridMaterial> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 0.001)
            float3 xformOp:translate = (0, 0, -0.5)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cube "RightGrid" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (0, 1.5707963, 0)
            }
            references = None
        )
        {
            rel material:binding = </root/Materials/GridMaterials/Materials/LightGridMaterial> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 1
            quatf xformOp:orient = (0.70710677, 0, 0.70710677, 0)
            float3 xformOp:scale = (1, 1, 0.01)
            float3 xformOp:translate = (0.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "Materials" (
        active = true
    )
    {
        reorder nameChildren = ["MaterialsPalette", "GridMaterials", "ABSPlasticMaterial"]
        def "GridMaterials" (
            active = true
            references = @GridMaterials.usda@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)

            over "Materials"
            {
                over "GridMaterial"
                {
                    color4f inputs:BaseColor (
                        customData = {
                            dictionary realitykit = {
                                float2 positionInSubgraph = (67.29334, 432.31796)
                                float2 sizeInSubgraph = (133, 53)
                                int stackingOrderInSubgraph = 1487
                            }
                        }
                    )
                    color4f inputs:LineColor (
                        customData = {
                            dictionary realitykit = {
                                float2 positionInSubgraph = (66.555145, 327.8113)
                                float2 sizeInSubgraph = (133, 53)
                                int stackingOrderInSubgraph = 1486
                            }
                        }
                    )
                    float2 inputs:LineCounts (
                        customData = {
                            dictionary realitykit = {
                                float2 positionInSubgraph = (77.921715, 140.37903)
                                float2 sizeInSubgraph = (138.5, 53)
                                int stackingOrderInSubgraph = 1416
                            }
                        }
                    )
                    float2 inputs:LineWidths (
                        customData = {
                            dictionary realitykit = {
                                float2 positionInSubgraph = (72.04498, 230.3688)
                                float2 sizeInSubgraph = (138.5, 53)
                                int stackingOrderInSubgraph = 1415
                            }
                        }
                    )
                    float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                    over "Combine3"
                    {
                        float2 ui:nodegraph:node:size = (145, 54)
                    }

                    over "Texcoord"
                    {
                        float2 ui:nodegraph:node:size = (180.5, 53)
                    }

                    over "Min"
                    {
                        float2 ui:nodegraph:node:size = (113, 40)
                    }

                    over "Remap"
                    {
                        float2 ui:nodegraph:node:size = (94, 181)
                    }

                    over "Alpha"
                    {
                        float2 ui:nodegraph:node:size = (94, 181)
                    }

                    over "Separate2"
                    {
                        float2 ui:nodegraph:node:size = (115, 127)
                    }

                    over "LineColor3"
                    {
                        float2 ui:nodegraph:node:size = (118, 127)
                    }

                    over "BaseColor3"
                    {
                        float2 ui:nodegraph:node:size = (122, 127)
                    }

                    over "Multiply"
                    {
                        float2 ui:nodegraph:node:size = (60, 36)
                    }

                    over "Add"
                    {
                        float2 ui:nodegraph:node:size = (61.5, 36.5)
                    }

                    over "Fractional"
                    {
                        float2 ui:nodegraph:node:size = (154.5, 109)
                    }

                    over "Multiply_1"
                    {
                        float2 ui:nodegraph:node:size = (60, 36)
                    }

                    over "Absval"
                    {
                        float2 ui:nodegraph:node:size = (121.5, 53)
                    }

                    over "Range"
                    {
                        float2 ui:nodegraph:node:size = (98, 217)
                    }

                    over "Subtract_1"
                    {
                        float2 ui:nodegraph:node:size = (61.5, 36)
                    }

                    over "Multiply_2"
                    {
                        float2 ui:nodegraph:node:size = (60, 36)
                    }

                    over "MaterialXPreviewSurface"
                    {
                        float2 ui:nodegraph:node:size = (207.5, 199)
                    }
                }

                over "LightGridMaterial"
                {
                    color4f inputs:BaseColor (
                        customData = {
                            dictionary realitykit = {
                                float2 positionInSubgraph = (67.29334, 432.31796)
                                float2 sizeInSubgraph = (133, 53)
                                int stackingOrderInSubgraph = 1365
                            }
                        }
                    )
                    color4f inputs:LineColor (
                        customData = {
                            dictionary realitykit = {
                                float2 positionInSubgraph = (66.555145, 327.8113)
                                float2 sizeInSubgraph = (133, 53)
                                int stackingOrderInSubgraph = 1390
                            }
                        }
                    )
                    float2 inputs:LineCounts (
                        customData = {
                            dictionary realitykit = {
                                float2 positionInSubgraph = (77.921715, 140.37903)
                                float2 sizeInSubgraph = (138.5, 53)
                                int stackingOrderInSubgraph = 1367
                            }
                        }
                    )
                    float2 inputs:LineWidths (
                        customData = {
                            dictionary realitykit = {
                                float2 positionInSubgraph = (72.04498, 230.3688)
                                float2 sizeInSubgraph = (138.5, 53)
                                int stackingOrderInSubgraph = 1369
                            }
                        }
                    )
                    float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
                }

                over "GraphNodes"
                {
                    over "shoudlDrawGridLine"
                    {
                        float3 inputs:isOnGridUnit (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-461.29688, -203.3086)
                                    float2 sizeInSubgraph = (148, 53)
                                    int stackingOrderInSubgraph = 3456
                                }
                            }
                        )
                        float3 inputs:objectNormal (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (-668.4414, -53.09375)
                                    float2 sizeInSubgraph = (152, 53)
                                    int stackingOrderInSubgraph = 3448
                                }
                            }
                        )
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (167.00003, 81)

                        over "absNormal"
                        {
                            float2 ui:nodegraph:node:size = (147.5, 53)
                        }

                        over "Oneminus_3"
                        {
                            float2 ui:nodegraph:node:size = (158, 109)
                        }

                        over "Step_4"
                        {
                            float2 ui:nodegraph:node:size = (129, 127)
                        }

                        over "Multiply"
                        {
                            float2 ui:nodegraph:node:size = (60, 36)
                        }

                        over "DotProduct_3"
                        {
                            float2 ui:nodegraph:node:size = (169, 53)
                        }

                        over "Step_6"
                        {
                            float2 ui:nodegraph:node:size = (129, 127)
                        }
                    }
                }

                over "UnitGridLinesMaterial"
                {
                    color4f inputs:baseColor (
                        customData = {
                            dictionary realitykit = {
                                float2 positionInSubgraph = (-503.90234, 219.8711)
                                float2 sizeInSubgraph = (133, 53)
                                int stackingOrderInSubgraph = 3155
                            }
                        }
                    )
                    color4f inputs:gridLineColor (
                        customData = {
                            dictionary realitykit = {
                                float2 positionInSubgraph = (-496.92188, 154.3086)
                                float2 sizeInSubgraph = (152, 53)
                                int stackingOrderInSubgraph = 3152
                            }
                        }
                    )
                    float inputs:GridLineWidth (
                        customData = {
                            dictionary realitykit = {
                                float2 positionInSubgraph = (-505.5625, -127.08594)
                                float2 sizeInSubgraph = (156.5, 53)
                            }
                        }
                    )
                    float3 inputs:GridUnits (
                        customData = {
                            dictionary realitykit = {
                                float2 positionInSubgraph = (-500.51172, -203.46484)
                                float2 sizeInSubgraph = (139, 53)
                            }
                        }
                    )
                    float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                    over "Normal"
                    {
                        float2 ui:nodegraph:node:size = (128.5, 40)
                    }

                    over "Position"
                    {
                        float2 ui:nodegraph:node:size = (133.5, 40)
                    }

                    over "Convert"
                    {
                        float2 ui:nodegraph:node:size = (135.5, 40)
                    }

                    over "isOnGridUnit"
                    {
                        float3 inputs:gridUnits (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (21.1875, -126.078125)
                                    float2 sizeInSubgraph = (139, 53)
                                    int stackingOrderInSubgraph = 3143
                                }
                            }
                        )
                        float inputs:lineWidth (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (18.117188, 36.359375)
                                    float2 sizeInSubgraph = (126.5, 53)
                                    int stackingOrderInSubgraph = 3013
                                }
                            }
                        )
                        float3 inputs:position (
                            customData = {
                                dictionary realitykit = {
                                    float2 positionInSubgraph = (20.367188, -246.52344)
                                    float2 sizeInSubgraph = (139, 53)
                                    int stackingOrderInSubgraph = 2593
                                }
                            }
                        )
                        float2 ui:nodegraph:node:size = (130, 217)
                        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (221.5, 153)
                    }

                    over "drawGridLine"
                    {
                        float2 ui:nodegraph:node:size = (133, 127)
                    }

                    over "Mix_1"
                    {
                        float2 ui:nodegraph:node:pos = (113.115326, 169.35252)
                        float2 ui:nodegraph:node:size = (109, 145)
                        int ui:nodegraph:node:stackingOrder = 3174
                    }

                    over "PreviewSurface"
                    {
                        float2 ui:nodegraph:node:size = (159.5, 307)
                    }

                    over "SeparateColor3Alpha"
                    {
                        float2 ui:nodegraph:node:size = (183, 127)
                    }
                }
            }

            over "Palette"
            {
                reorder nameChildren = ["globeMaterialHolder", "gridMaterialHolder", "lightGridMaterialHolder", "plasticMaterialHolder"]
                def Sphere "plasticMaterialHolder" (
                    active = true
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = </root/Materials/GridMaterials/Palette/lightGridMaterialHolder>
                )
                {
                    rel material:binding = </root/Materials/BlackABSPlastic> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double radius = 0.1
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    float3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }
        }

        def "ABSPlasticMaterial" (
            active = true
            references = @BlackABSPlastic.usdz@
        )
        {
            color3f inputs:Basecolor_Tint = (0, 0.5898009, 1) (
                colorSpace = "srgb_texture"
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-45.51249, 49.172512)
                        float2 sizeInSubgraph = (160.5, 53)
                        int stackingOrderInSubgraph = 2293
                    }
                }
            )
            float2 inputs:UV_Scale (
                customData = {
                    dictionary realitykit = {
                        float2 positionInSubgraph = (-725.2588, 351.55255)
                        float2 sizeInSubgraph = (138.5, 53)
                        int stackingOrderInSubgraph = 2280
                    }
                }
            )
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            over "Mix"
            {
                float2 ui:nodegraph:node:size = (109, 145)
            }

            over "Swizzle_1"
            {
                float2 ui:nodegraph:node:size = (145.5, 53)
            }

            over "Swizzle"
            {
                float2 ui:nodegraph:node:size = (133.5, 40)
            }

            over "Multiply_1"
            {
                float2 ui:nodegraph:node:size = (60, 36)
            }

            over "Dot"
            {
                float2 ui:nodegraph:node:size = (44, 18)
            }

            over "multiply"
            {
                float2 ui:nodegraph:node:size = (60, 36)
            }

            over "add"
            {
                float2 ui:nodegraph:node:size = (61.5, 36.5)
            }

            over "PreviewSurface"
            {
                float2 ui:nodegraph:node:size = (148.5, 199)
            }

            over "BaseColor"
            {
                float2 ui:nodegraph:node:size = (158.5, 235)
            }

            over "Roughness"
            {
                float2 ui:nodegraph:node:size = (158.5, 235)
            }

            over "Metallic"
            {
                float2 ui:nodegraph:node:size = (158.5, 235)
            }

            over "Normal"
            {
                float2 ui:nodegraph:node:size = (158.5, 235)
            }
        }
    }

    def Cube "PlasticBlock" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </root/Materials/ABSPlasticMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.25, -0.45, 0.15)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

